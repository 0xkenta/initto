<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>INITTO</title>
	<subtitle></subtitle>
	<link href="https://initto.devprotocol.xyz/feed.xml" rel="self"/>
	<link href="https://initto.devprotocol.xyz/"/>
	
	<updated>2021-02-15T00:00:00+00:00</updated>
	
	<id>https://initto.devprotocol.xyz</id>
	<author>
  <name>devprotocol team</name>
  <email></email>
	</author>
	
  
  <entry>
    <title>What is Protocol?</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-protocol/"/>
    <updated>2021-02-27T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-protocol/</id>
    <content type="html"><![CDATA[
      <p>Hi, I’m aggre.</p>
<p>Dev Protocol is “a protocol” built for Ethereum. It is a “system substituting for donation” to create a monetizing opportunity for open assets in OSS, Open Access, etc. It’s neither a platform nor a service, but “a protocol”. As you may see, we include the word, protocol, for “Dev Protocol”. We normally don’t always make a detailed research on the meaning of names. Plus, unfortunately,  “protocol” is a hard-to-grasp terminology. Therefore, even those who know that every name has its some kind of meaning might be still confused with “protocol”. No worries. The definition of protocol is not so significant. The important thing here is to figure out how different it is from web service. If you could see the difference, you’ll get the picture of Dev Protocol.</p>
<h2>Protocols in existing service</h2>
<p>A great start to get the idea of Dev Protocol is to look for a familiar case.</p>
<p>In the modern world of the internet, we see many types of web service using various digital payment for monetization. Most of the service is paid with credit cards, for example, “Alice pays X dollars for Bob”.</p>
<p>A protocol called ISO8583 is used for credit card payment. Since it is a payment via the internet, protocols such as TCP, IP, SSL and TSL are used as well. The money transfer from Alice to Bob is one type of protocol. There are a lot of protocols, but the meaning of each protocol is not so necessary! The fact that web service is composed of a group of protocols is an important point.</p>
<p>Let’s say a person is launching an e-commerce without utilizing any existing protocols. Well, that’s not even an “e” commerce, so it should be like “a new activity to get something from a distant place”. Forgive me for my utmost possible but might be complicated word choice. Anyhow, in it’s service, he/she has to exchange something without using the internet, emails, smoke signals, letters, money, or barter trade. Even if it sounds revolutionary depending on your outlook and set of values, I recommend you not to suggest it to your friends unless they are drunk and stayed up late at midnight.</p>
<p>I think you get some idea on the difference between “web service” and “protocol”.</p>
<p>Web service is composed of the combination of protocols. Web service can only carry its own protocol, but there is almost no advantages for it. Protocols definitely has versatile purposes, so they are used among people sharing the same objectives.</p>
<h2>What’s Dev Protocol used for?</h2>
<p>Dev Protocol is a protocol that enables people to have a monetizing opportunity with open assets such as OSS, Open Access, etc. It is a kind of function that replaces arrangements like “Alice pays X dollars for Bob” mentioned in the previous chapter.</p>
<p>The difference between open assets and mugs sold at an online shop is that people cannot receive payment as a compensation for the service of open assets. Creators of them release their assets with good intentions and they have to earn their living from their another source of income. If such creators ask compensation of their users, existence value of the open assets is lost due to the lack of openness. What a paradox!</p>
<p>Conventionally, the biggest chance for monetization that people can rely on with open assets was donation. Donation itself is one of the greatest protocols. However, we thought it inappropriate that open assets rely on a single protocol. That’s why we developed Dev Protocol.</p>
<h2>What can we do with Dev Protocol?</h2>
<p>Briefly speaking, it’s like this : “Both Alice and Bob gain an income without money transfer.” Oh, please don’t think that I’ve turned into an enigmatic alien living outside the space.</p>
<p>Well, the income here is not cash but crypto assets called DEV. DEV is inflating slowly, in other words, it increases the total amount of supply gradually. Its new supply is allocated to people depositing DEV and OSS creators. Depositing is usually called “Staking”.</p>
<p>People, who have done staking, receive new supply in addition to DEV that they staked. For example, if the staked DEV is 100%, the total DEV with new supply becomes 120%. OSS creators receive the new supply of DEV in proportion to the number of staking that they’ve obtained.</p>
<p>Let me organize what I’ve talked to you so far in the next chapter.</p>
<h2>Who uses Dev Protocol?</h2>
<p>There are 3 types of people.</p>
<ol>
<li>Authors</li>
<li>Patrons</li>
<li>Maintainers</li>
</ol>
<p>Their description is as follows:</p>
<p><strong>Authors</strong><br>
Authors do activities that are subject to patrons’ support. Open source developers, researchers and creators are categorized as such people. Authors gain owner reward in proportion to the obtained number of staking.</p>
<p><strong>Patrons</strong><br>
Patrons do staking in order to support authors’ activities. Patrons gain staking reward in return for supporting authors.</p>
<p><strong>Maintainers</strong><br>
Maintainers develop Market, a scheme authenticating authors’ activities, and improve the core of Dev Protocol.</p>
<h2>Are we Dev Protocol?</h2>
<p>I think you’ve already noticed that protocols are not developed by certain companies, as I touched on it in the previous chapter. The internet is never composed of only one company.</p>
<p>Dev Protocol is maintained by Frame00, a Japanese company, currently. However, its maintenance authority is going to be lost little by little in the process of “decentralization”, which would take 6 months to 1 year and a half.</p>
<p>As long as Dev Protocol is a protocol, it’s an existence like the internet (TCP/IP) or SSL/TSL, so it shouldn’t be developed for sales by a single commercial company.</p>
<h2>Maintenance without administrators</h2>
<p>Our idea is that a system maintained by people meeting and parting based on incentives is more sustainable in terms of neutrality and permanence, rather than a maintenance system that relies on a legal body.</p>
<p>The reason why we adopted Ethereum as the basis for Dev Protocol is the same. Since Ethereum is one of the decentralized computing, it runs without administrators.</p>
<p>That means, in case we’re all run over by a bus, Dev Protocol continues to operate normally. When it comes to the adequacy of a protocol, such function should be required.</p>
<h2>What can developers do?</h2>
<p>To conclude, Dev Protocol is not a web service but a protocol.</p>
<p>If you want to accomplish something on the internet, Dev Protocol can be one of your choices as a tool.</p>
<p>You can also create monetizing service on the web for users such as Authors and Patrons. There is no need to pay commission for the protocol, and no restriction like API limit. You can work as a Maintainer to develop a protocol itself. There aren’t so many codes required.</p>
<p>It would be our greatest pleasure if<a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">documents of Dev Protocol</a>could be informative for you.</p>
<p>For those who want to know more about Dev Protocol, I’m preparing an article about decentralized protocols for my next entry.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (1/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210226/"/>
    <updated>2021-02-26T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210226/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
Dapp will list the creators of OSS projects that are tokenized by the Dev Protocol, then display the tokens of those creators, and then create a staking function.</p>
<ul>
<li>Step1: <a href="#section-1">Prepare the development environment</a></li>
<li>Step2: <a href="#section-2">Get a list of creators using Data Viewer</a></li>
<li>Step3: <a href="#section-3">Get creator information using dev-for-apps</a></li>
<li>Step4: <a href="#section-4">Code the list page</a><br>
<a name="section-1"></a></li>
</ul>
<h2>Prepare the development environment</h2>
<p>First, let's prepare a development environment. I have prepared the sample code for this tutorial on Github, so please use it.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">git clone https://github.com/kazu80/tokener-find.git -b sample-code-v1.4.0</span></code></pre>
<p>Run npm after clone</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">cd tokener-find</span><br><span class="highlight-line">npm install</span></code></pre>
<p>After that, execute the following command to start the site locally</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npx webpack</span><br><span class="highlight-line">npx webpack serve</span></code></pre>
<h2>Overview of the application</h2>
<p>This application has the following 2 pages</p>
<ul>
<li>Creator list page</li>
<li>Creator details page</li>
</ul>
<p>On the creator details page, Display the tokens owned by the creator and select and staking tokens.</p>
<p><img src="/images/posts/20210226/pic01.png" alt="Complete image"><br>
※ The html file under the src directory is this screen<br>
※ If you want to see how it works, you can also check it from <a href="https://kawakami.dev/lab/tokens/" target="_blank" rel="noopener">here</a></p>
<p>This time, I would like to create a creator list page.</p>
<h2>Creating a creator list page</h2>
<p>The Dev Protocol tokenizes OSS projects. So to get a list of creators, you need to filter all tokens by Author name.<br>
<a name="section-2"></a></p>
<h3>Get a list of creators using Data Viewer</h3>
<p>Token information can be gotten from Data Viewer</p>
<blockquote>
<p>Please refer to the linked document for <a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">Data Viewer</a></p>
</blockquote>
<p>You can get a list of creators with the endpoints and queries below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">// endpoints</span><br><span class="highlight-line">https://api.devprtcl.com/v1/graphql</span><br><span class="highlight-line"></span><br><span class="highlight-line">// query</span><br><span class="highlight-line">query Properties {</span><br><span class="highlight-line">    property_meta(distinct_on: author) {</span><br><span class="highlight-line">        property</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p>This is a sample to get a list of creators using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> allCreatorInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span></code></pre>
<p>The data is in JSON format as shown below</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">{</span><br><span class="highlight-line">    "data": {</span><br><span class="highlight-line">        "property_meta": [</span><br><span class="highlight-line">            {</span><br><span class="highlight-line">                "author": "Creator address"</span><br><span class="highlight-line">            },</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        ]</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p><a name="section-3"></a></p>
<h3>Get creator information using dev-for-apps</h3>
<p>Data Viewer can only get the creator's address. I also want to use the creator's name and image on the list page, so get the information from dev-for-apps</p>
<blockquote>
<p>dev-for-apps is an API that get creator information and token information.</p>
</blockquote>
<p>Create a URL and make a GET request</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">https://dev-for-apps.azureedge.net/accounts?address="Creator address"</span></code></pre>
<p>Get creator information using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> <span class="token string">"Creator address"</span><span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></code></pre>
<p>The data is in JSON format as shown below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">[</span><br><span class="highlight-line">    {</span><br><span class="highlight-line">        "name": "name",</span><br><span class="highlight-line">        "portrait": {</span><br><span class="highlight-line">            "url": "profile image URL",</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        },</span><br><span class="highlight-line">        ...</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">]</span></code></pre>
<p>The dev-for-apps API can get a lot of other information.</p>
<p><a name="section-4"></a></p>
<h3>Code the list page</h3>
<p>Coding the creator list page using the gotten data.<br>
If you put all the sample code that follows in <code>src/assets/ts/main.ts</code>, the creator list will be displayed.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">// Get a list of creators from Data Viewer</span></span><br><span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> info <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get creator information using dev-for-app</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>creatorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">continue</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Creating HTML to display creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">        &lt;article class="row mt-4 mb-3"></span><br><span class="highlight-line">            &lt;div class="col-10 d-flex align-items-center"></span><br><span class="highlight-line">                &lt;img class="rounded-circle me-3" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>portrait<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="creator image" width="60" height="60" style="object-fit: contain"></span><br><span class="highlight-line">                &lt;p class="fs-6"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br><span class="highlight-line">            &lt;/div></span><br><span class="highlight-line">            &lt;a href="tokens.html?creator=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="col-2 d-flex align-items-center justify-content-center btn btn-primary">TOKEN&lt;/a></span><br><span class="highlight-line">        &lt;/article></span><br>    `</span></span><span class="token punctuation">;</span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfoHTMLElement <span class="token operator">=</span> div<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get a tag to insert creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorsHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"creators"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    </span><br><span class="highlight-line">    creatorsHTMLElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>creatorInfoHTMLElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The code from here is added below the above code. Or you can code it in another file and then import it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>      query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span><span class="token parameter">creatorAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> creatorAddress<span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'portrait'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>portrait<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the coding so far and a few modifications, the page is complete.<br>
<img src="/images/posts/20210226/pic02.png" alt="list page image"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This time, using the two libraries provided in the Dev Protocol, we acquired creator information and detailed information.<br>
Next time, we will create a detailed page for creators.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol documentation information</title>
    <link href="https://initto.devprotocol.xyz/posts/20210215/"/>
    <updated>2021-02-15T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210215/</id>
    <content type="html"><![CDATA[
      <p>We would like to inform you of the currently available Dev Protocol documentation.</p>
<h2>Development documentation</h2>
<p>Here’s a summary of Dev Protocol’s features.</p>
<p><a href="https://github.com/dev-protocol/protocol/blob/main/README.md" target="_blank" rel="noopener">dev-protocol/protocol</a></p>
<p>Once set up, you will be able to use the functions provided by the Dev Protocol. Please use it when you want to use the Dev Protocol contract in Dapp development.<br>
The document above is a README, so please refer to the following link for more details.</p>
<p><a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">Development documentation</a></p>
<blockquote>
<p>p.s. There is an old part in the content of the document, so if you do not understand, please ask at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a></p>
</blockquote>
<h2>dev-kit Document</h2>
<p><code>dev-kit</code> is a library for using the functions of Dev Protocol from JavaScript (TypeScript).</p>
<p><a href="https://www.npmjs.com/package/@devprotocol/dev-kit" target="_blank" rel="noopener">dev-kit</a></p>
<p>Please use it when you want to use the Dev Protocol contract from the front end of the application.</p>
<h2>Dev Protocol Data Viewer</h2>
<p>With <code>Data Viewer</code>, You can acquire various data of Dev Protocol by using GraphQL.</p>
<p><a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer</a></p>
<h3>Query Builder</h3>
<p><a href="https://explorer.graphql.devprotocol.xyz/" target="_blank" rel="noopener">https://explorer.graphql.devprotocol.xyz/</a></p>
<p>The information in the document is updated from time to time. If you have any questions, or feel a difficulty in understanding the text, please let us know at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a>.</p>

    ]]></content>
  </entry>
	
</feed>
