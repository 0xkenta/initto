<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>INITTO</title>
	<subtitle></subtitle>
	<link href="https://initto.devprotocol.xyz/feed.xml" rel="self"/>
	<link href="https://initto.devprotocol.xyz/"/>
	
	<updated>2021-02-15T00:00:00+00:00</updated>
	
	<id>https://initto.devprotocol.xyz</id>
	<author>
  <name>devprotocol team</name>
  <email></email>
	</author>
	
  
  <entry>
    <title>Dev Protocol rather than donation service</title>
    <link href="https://initto.devprotocol.xyz/posts/dev-protocol-rather-than-donation-service/"/>
    <updated>2021-03-11T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/dev-protocol-rather-than-donation-service/</id>
    <content type="html"><![CDATA[
      <p>Hi, this is Dev Protocol Team.<br>
We‚Äôve continued the development of Dev Protocol since 2018, aiming at the world where all innovators are evaluated and can sustainably challenge their goals.</p>
<p>Dev Protocol is an open source middleware and it</p>
<ul>
<li>is a decentralized protocol built on Ethereum.</li>
<li>allows creators to tokenize their assets and turn them into sustainable.</li>
<li>enables creators to monetize and share with the entire community.</li>
</ul>
<p>It is a technology that makes it possible for people to monetize internet open assets such as Open Source, Open Access, Creative Commons and so on.<br>
Dev Protocol is now corresponding to GitHub repository, so OSS developers all over the world have been successfully raising funds.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/stakes-social_top.png" alt="Dev Protocol „Çí‰Ωø„Å£„ÅüÂÖ¨Âºè„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥(Dapp) Stakes.social"><br>
Official Application using Dev Protocol (Dapp) Stakes.social</p>
<h1>Challenges of monetizing open assets</h1>
<p>We‚Äôve actually had various ways of monetization for creators‚Äô open assets.</p>
<p>For example, we have</p>
<ul>
<li>ad revenue from streaming (YouTube)</li>
<li>Sales of contents at blog platform and social tipping (note, Buy Me a Coffee)</li>
<li>Service for production and sales of merchandise (Redbubble)</li>
<li>Crowd funding (Kickstarter, GoFundMe)</li>
<li>Donation service (Patreon, GitHub Sponsors)</li>
</ul>
<p>There are many types of support service for creators, and people can easily start using them. Despite high familiarity of such service, we‚Äôve had a desire to develop a decentralized protocol instead of a web service.</p>
<h1>As a means to pay for free assets</h1>
<p>Our main reason for it is that in such web service, supporters simply pay for  provided ‚Äúcontents‚Äù and ‚Äúproducts‚Äù as well as contribute to their advertisement value while creators‚Äô daily activities themselves are not monetized (in spite of the fact that their activities are the biggest source of value that creators provide us with).</p>
<p>All of us can use assets like OSS that are open and free in the internet without any payment. Therefore, more than 83% of projects are terminated within a year although there are numbers of methods for monetization, which is a critical condition in terms of crisis of sustainability. (Reference:<a href="https://speakerdeck.com/aggre/the-money-for-the-openable-and-shareable-era" target="_blank" rel="noopener">The money for the openable and shareable era</a>)</p>
<h1>Why are open assets free of charge?</h1>
<p>I have a question for those who have used assets such as Open Access and Creative Commons. <strong>‚ÄúDo you think we can use these assets for free because they have no economic value?‚Äù</strong></p>
<p>If assets are closed, monetization becomes much easier. You can just say to your users, ‚ÄúIf you want to use it, pay for it.‚Äù It is an extremely simple transaction, but why do creators make their assets open? You can find the answer if you look at the situation in OSS world.<br>
Because of the openness, users from all over the world participate in collaboration, and innovation is on the rise.</p>
<h1>Open protocol to circulate funds for free assets</h1>
<p>So far, we‚Äôve talked about Dev Protocol‚Äôs ability</p>
<ul>
<li>to monetize creators‚Äô assets per se</li>
<li>to pay compensation for free assets</li>
<li>to ensure sustainable creators‚Äô environment for their activities</li>
<li>to realize sustainable support for supporters</li>
</ul>
<p>These 4 points were required goals to achieve the development of Dev Protocol.</p>
<p>Transaction based on the closed trade has been the basis in our economic system. In order to accurately evaluate potential market value of open assets which have already shown a rapid expansion, we came to a conclusion that we need to develop an open economic system, in other words, a new protocol.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/open-asset-economy.png" alt="Open Asset„ÅÆÁµåÊ∏à„Çí‰Ωú„Çä„ÄÅÊó¢Â≠òÁµåÊ∏à„ÇíÂ°ó„ÇäÂ§â„Åà„Çã"><br>
Create an Open Asset economy to change existing economy</p>
<h1>New &amp; sustainable incentive model</h1>
<p>Dev Protocol is a whole new ecosystem designed for creators. It enables creators to tokenize open assets, and to use great features to grow their projects.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/dev-protocol_schemeoutline_for_EN.png" alt="Dev Protocol„ÅÆ„Çπ„Ç≠„Éº„É†Ê¶ÇË¶Å"><br>
Overview of Dev Protocol‚Äôs scheme</p>
<p>What Dev Protocol is dramatically changing creates an opportunity to change for both creators and sponsors.<br>
If you support creators through DEV tpkens, both creators and supporters receive more DEV tokens. In other words, it is a structure in which ‚Äúboth creators and supporters have incentives‚Äù.</p>
<h1>Profit by supporting creators</h1>
<p>When it comes to traditional donation, ‚Äúmoney is gone‚Äù from the perspective of supporters, so it is difficult for creators to expect continuous donation as it is based on supporters‚Äô good intentions. However, with DEV tokens,new DEV token will consequently increase in accordance with the period of support. That means we have incentives to continue support instead of a system relying on good intentions.</p>
<p>*For more details, have a look at our latest <a href="https://github.com/dev-protocol/protocol/blob/master/docs/POLICY.md" target="_blank" rel="noopener">Policy</a> on whitepaper.</p>
<h1>Sharing ownership and profits</h1>
<p>Another remarkable feature of Dev Protocol is its ability to produce a quality like <strong>‚Äúcorporation‚Äù</strong> for assets. It is called OSS token.</p>
<p>Functions of OSS token are like this:</p>
<ul>
<li>Proof of ownership and sharing with others on a voluntary basis.</li>
<li>While assets are being sponsored, DEV tokens are automatically distributed to all OSS token holders.</li>
<li>DEV tokens will increase every 15 seconds according to the ownership rate of OSS token.</li>
</ul>
<p>Since OSS token is ERC20, you can sell or buy it at DEX, etc. Thanks to this system, all the people involved, including creators, contributors and supporters, can share incentives.</p>
<h1>Decentralized protocol</h1>
<p>As Dev Protocol is decentralized, all of us can utilize this network and create an application equipped with a sustainable incentive model.</p>
<p><strong>No administrators intervene this process. Everything is operated openly and in real time on blockchain.</strong> All users, including creators, supporters and community members, can increase their DEV by 1 block (every 15 secs), so there is no need for them to manage reward.</p>
<p>This structure is made for creators to focus on ‚Äúcreating‚Äù without worrying about extra work since it is our goal to change the world where they can sustainably ‚Äúcreate‚Äù.</p>
<h1>Past and Future of Dev Protocol</h1>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Dev Protocol‚Äôs 2021 is aimed at making <a href="https://t.co/q1a8aKLQB5">https://t.co/q1a8aKLQB5</a> the got-to solution for Open Source funding. We‚Äôre excited to share some of our milestones for 2021! üéâ <br><br>-DeFi Integrations<br>-More UI/UX Updates<br>-Growth Hacking Strategies<br>-Launch Governance<br>-Staking Perks<br>-L2 Scaling <a href="https://t.co/dkanvfsNyl">pic.twitter.com/dkanvfsNyl</a></p>&mdash; Dev Protocol (@devprtcl) <a href="https://twitter.com/devprtcl/status/1350126479141728259?ref_src=twsrc%5Etfw">January 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>A year has passed since the main net launch of Dev Protocol. Its ecosystem keeps largely growing with much supporters. Through our blog, INITTO, which has just started recently, we‚Äôll share our information to spread the usage of Dev Protocol for creators. üêá</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Technical description of the incubator</title>
    <link href="https://initto.devprotocol.xyz/posts/20210310/"/>
    <updated>2021-03-10T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210310/</id>
    <content type="html"><![CDATA[
      <h1>In the beginning</h1>
<p>I‚Äôm <a href="https://twitter.com/horobi_gengar" target="_blank" rel="noopener">Taniguchi</a>, an engineer at <a href="https://corp.frame00.com" target="_blank" rel="noopener">Frame00</a>.<br>
I would like to give you a technical explanation of our new feature, <a href="https://medium.com/devprtcl/dev-protocol-incubator-launches-ef4f35940095" target="_blank" rel="noopener">Incubator</a>, which was released recently.</p>
<h1>Overview</h1>
<ul>
<li><a href="#role-setting">Role settings</a></li>
<li><a href="#eternal-storage">Eternal Storage</a></li>
<li><a href="#interface">Interface</a></li>
</ul>
<h1>Description</h1>
<p><a name="role-setting"></a></p>
<h2>Role settings</h2>
<p>The incubator is designed to operate with three roles: an administrator, a storage administrator, and an operator.<br>
The administrator has combined authority to perform all functions, including those of the storage administrator and the operator, while the storage administrator and the operator have authority to perform for each relevant function.<br>
Incubator implements this role configuration feature using OpenZeppelin's AccessControl.<br>
<a href="https://docs.openzeppelin.com/contracts/3.x/" target="_blank" rel="noopener">OpenZeppelin</a> is a Solidity library. By using OpenZeppelin, you can dramatically increase the efficiency of developing contracts using Solidity.<br>
One of them is a contract called <a href="https://docs.openzeppelin.com/contracts/3.x/access-control" target="_blank" rel="noopener">AccessControl</a>. By using this contract, you can implement a contract that assumes operation with separate roles. By using this, it is possible to implement a contract that assumes operation with separate roles.<br>
AccessControl was a bit complex due to a variety of functions implemented, so we created a wrapped contract to simply implement the only necessary functions.<br>
It is available in the public domain, and you can use it if you like (at your own risk).</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>util<span class="token operator">-</span>contracts</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Admin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/util-contracts/contracts/access/Admin.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// By inheriting the Admin contract, addAdmin, deleteAdmin and isAdmin functions are available.</span></span><br><span class="highlight-line"><span class="token comment">// If necessary, you can add, delete, or confirm users who hold Admin privileges.</span></span><br><span class="highlight-line">contract Logic is Admin <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Since the Admin contract inherits AccessControl,</span></span><br><span class="highlight-line">    <span class="token comment">// it is possible to create new roles and link them with addresses depending on the situation.</span></span><br><span class="highlight-line">    bytes32 <span class="token keyword">public</span> constant <span class="token constant">OPERATOR_ROLE</span> <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"OPERATOR_ROLE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// After the constructor of the Logic contract is executed, the constructor of the Admin contract will be executed.</span></span><br><span class="highlight-line">    <span class="token comment">// Then, Admin privileges will be automatically granted to deployers.</span></span><br><span class="highlight-line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// The setup here is that when Admin rights are granted, operator rights are also granted.</span></span><br><span class="highlight-line">        <span class="token function">_setRoleAdmin</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_ADMIN_ROLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token comment">// Operator privileges are also granted to deployers.</span></span><br><span class="highlight-line">        <span class="token function">grantRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> <span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Modifiers for checking Operator privileges</span></span><br><span class="highlight-line">    modifier onlyOperator <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">require</span><span class="token punctuation">(</span><span class="token function">isOperator</span><span class="token punctuation">(</span><span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"operator only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        _<span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// By granting onlyOperator, it can only be executed by a users with Operator privileges</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external pure onlyOperator <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint256</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can check whether you have Operator privileges or not.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">isOperator</span><span class="token punctuation">(</span><span class="token parameter">address account</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can grant the Operator privilege. </span></span><br><span class="highlight-line">    <span class="token comment">// This function cannot be executed without Admin privileges, since it is marked as "onlyAdmin".</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">addOperator</span><span class="token punctuation">(</span><span class="token parameter">address _operator</span><span class="token punctuation">)</span> external onlyAdmin <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">grantRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> _operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can take away the Operator privileges.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">deleteOperator</span><span class="token punctuation">(</span><span class="token parameter">address _operator</span><span class="token punctuation">)</span> external onlyAdmin <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">revokeRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> _operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>OpenZeppelin also has a contract called <a href="https://docs.openzeppelin.com/contracts/2.x/access-control#ownership-and-ownable">Ownable</a>.<br>
If there are only two patterns, a role as an administrator and a role other than that, use Ownable instead of AccessControl.<br>
This is simpler to implement, which reduces deployment and execution costs, and makes it easier to operate.</p>
<p><a name="eternal-storage"></a></p>
<h2>Eternal Storage</h2>
<p>The incubator is designed to be up-gradable.<br>
By retaining the data in an external contract, if a problem is found in the logic of the incubator itself, or if a change in specifications is necessary, the program can be modified as necessary, the storage can be replaced, and the operation can continue.<br>
This mechanism is called &quot;<a href="https://fravoll.github.io/solidity-patterns/eternal_storage.html" target="_blank" rel="noopener">Eternal Storage</a>&quot;. It‚Äôs not my invention, but it is one of the famous Solidity design patterns. Simply put, it is just a hashmap.<br>
Contracts deployed on the blockchain are not modifiable, so if you want to operate them continuously like a web application, you can use this mechanism.<br>
This is a very useful design pattern, but it has some disadvantages. Since the data is written to a separate contract, the cost of gas will be higher. You need to consider the actual operation, compare advantages and disadvantages, and decide whether to use it or not.<br>
As with the aforementioned Admin contract, it is available as util-contracts, so if you wish to use it (at your own risk), please do so.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>util<span class="token operator">-</span>contracts</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>SafeMath<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@openzeppelin/contracts/math/SafeMath.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>UsingStorage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/util-contracts/contracts/storage/UsingStorage.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// Create a contract that inherits UsingStorage.</span></span><br><span class="highlight-line">contract Logic is UsingStorage <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token comment">// To prevent overflow, SafeMath is used for the calculation process.</span></span><br><span class="highlight-line">    using SafeMath <span class="token keyword">for</span> uint256<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token parameter">string memory _key<span class="token punctuation">,</span> uint256 _value_</span><span class="token punctuation">)</span> internal</span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// Here we have stored uint256 as an example, but you can use address, string, or boolean.</span></span><br><span class="highlight-line">        <span class="token comment">// For more details, please refer to the EternalStorage contract that is generated inside UsingStorage.</span></span><br><span class="highlight-line">        <span class="token function">eternalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUint</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> _price<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint256</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">eternalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUint</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> <span class="token keyword">private</span> pure <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bytes32</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// In EVM, data is always saved as 32 bytes when it is stored in Storage.</span></span><br><span class="highlight-line">        <span class="token comment">// Therefore, considering the amount of data to be stored and the amount of gas to be used, </span></span><br><span class="highlight-line">        <span class="token comment">// setting it at 32 bytes will be the most efficient.</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token string">"_key"</span><span class="token punctuation">,</span> _key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// This function increments the number each time the add function is executed.</span></span><br><span class="highlight-line">    <span class="token comment">// By storing the direct in external storage instead of internal variables, it can be operated continuously.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        uint256 tmp <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token function">setValue</span><span class="token punctuation">(</span>_key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Example of operation</h3>
<h4>[When first deployed]</h4>
<ol>
<li>After deploying the Logic contract, run the createStorage function to create the storage.</li>
</ol>
<h4>[When deploying for the second time or later]</h4>
<ol>
<li>If you want to change the specification of the Logic contract, deploy the modified Logic contract first.</li>
<li>Run the old Logic contract's getStorageAddress function to get the address of EternalStorage.</li>
<li>Run the setStorage function of the new Logic contract to set the address of the EternalStorage.</li>
<li>Run the old Logic contract's changeOwner function to delegate storage write permission to the new Logic contract.</li>
</ol>
<p><a name="interface"></a></p>
<h2>Interface</h2>
<p>An interface in Solidity is a description of a function definition that can be executed outside the contract.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// ‰æã Dev Protocol's Allocator contract interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.5</span><span class="token number">.17</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">interface</span> <span class="token class-name">IAllocator</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">beforeBalanceChange</span><span class="token punctuation">(</span></span><br>        <span class="token parameter">address _property<span class="token punctuation">,</span><br><span class="highlight-line">        address _from<span class="token punctuation">,</span></span><br>        address _to</span><br><span class="highlight-line">    <span class="token punctuation">)</span> external<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">calculateMaxRewardsPerBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint256<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The interface itself can only contain externals, but there is no problem if the actual contract is public.<br>
(Except the case of inheritance).<br>
The biggest advantage of using interfaces is that they can resolve dependencies.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">interface</span> <span class="token class-name">ILogic</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>SafeMath<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@openzeppelin/contracts/math/SafeMath.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>ILogic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./ILogic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic is ILogic<span class="token punctuation">{</span></span><br><span class="highlight-line">    using SafeMath <span class="token keyword">for</span> uint256<span class="token punctuation">;</span></span><br><span class="highlight-line">    uint256 <span class="token keyword">private</span> counter<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        counter <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Example: Using an interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>ILogic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./ILogic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic2UseInterface <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> logic <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">ILogic</span><span class="token punctuation">(</span>logic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Example: Not using the interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Logic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Logic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic2NotUseInterfase <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> logic <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">Logic</span><span class="token punctuation">(</span>logic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>When using an interface, you don't need to be aware of what you are doing in the caller (Logic.hogehoge() in this case).<br>
If you create a flatten file(*1) for Logic2NotUseInterfase, it will contain the Logic2 contract, the Logic contract, and the SafeMath library referenced from it.<br>
If the SafeMath library refers to another large contract or library, it must also be included.<br>
When this happens, the size of the bytecode generated from it becomes large, and the gas cost at the time of deployment becomes bloated, creating a major operational burden.<br>
Conversely, if you want to create a flatten file for Logic2UseInterfase, you only need the Logic2 contract and the ILogic interface.<br>
The size of the bytecode will be smaller, and the operational cost will be less.<br>
There is also the advantage of reduced implementation cost, as the interface allows building without the main contract.<br>
We are benefiting from the use of Dev Protocol interface as well as Incubator.<br>
The Dev Protocol interface is open for everyone to use, and you are welcome to use it if you like.</p>
<p>*1 A file that combines all relevant sol files into one in order to register programming code with Etherscan.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>protocol</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>IDev<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/protocol/contracts/interface/IDev.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> devToken <span class="token operator">=</span> <span class="token number">0x5cAf454Ba92e6F2c929DF14667Ee360eD9fD5b26</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">lockup</span><span class="token punctuation">(</span><span class="token parameter">address _property<span class="token punctuation">,</span> uint256 _staking</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// staking!</span></span><br><span class="highlight-line">        <span class="token function">IDev</span><span class="token punctuation">(</span>devToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>_property<span class="token punctuation">,</span> _staking<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h1>Finally</h1>
<p>There might be more to share, but I have described the most common ones.<br>
We will release more information on how to write and operate test cases as well as Solidity.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (2/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210305/"/>
    <updated>2021-03-05T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210305/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
This is the second. If you haven't read the last time yet, please go back to <a href="https://initto.devprotocol.xyz/posts/20210226/" target="_blank" rel="noopener">1st</a>.<br>
This time I would like to make a detailed page of the creator</p>
<ul>
<li>STEP01: <a href="#heading-step01:get-creator-information">Get creator information</a></li>
<li>STEP02: <a href="#heading-step02:-get-token-information">Get token information</a></li>
<li>STEP03: <a href="#heading-step03:-get-cover-image-of-token">Get cover image of token</a></li>
<li>STEP04: <a href="#heading-step04:-code-the-detail-page">Code the detail page</a></li>
</ul>
<h2>Prepare the development environment</h2>
<p>We will continue to use the development environment that was used the first time.<br>
For details, please check <a href="/posts/20210226/#section-1">1st</a></p>
<h2>Overview of the detail page</h2>
<p>The page will create this time will be the creator details page that is transitioned from the creator list page. On the creator details page, the creator's information and the tokens possessed are displayed.<br>
<img src="/images/posts/20210305/pic03.png" alt="tokens page"></p>
<h2>STEP01:Get creator information</h2>
<p>Creator information is got from dev-for-apps. The creator's address used to get it is added to the link URL from the index page</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**<br><span class="highlight-line"> * Page transition from index with the following URL</span><br><span class="highlight-line"> * https://localhost:3000/tokens.html?creator=xxxxx</span><br> **/</span><br><span class="highlight-line"><span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">const</span> creator   <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'creator'</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> creator<span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token operator">...</span></span></code></pre>
<h2>STEP02: Get token information</h2>
<p>The token information is got from the Data Viewer.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(where: {author: {_eq: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}}) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                        name</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h2>STEP03: Get cover image of token</h2>
<p>In Data Viewer, the token cover image cannot be got, so it is got from dev-for-app.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> address<span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/properties?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The acquired data is in the following JSON format.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token string">"cover_image"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://storageaccountdevfobc15.blob.core.windows.net/dev-for-apps-images/assets/d3e6c900_6a1b_11ea_91be_d87dfda8b8e7_36d483d5b7.jpg"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token operator">...</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token operator">...</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>Various information other than this can be obtained, but here, the information other than those used on the details page is omitted.</p>
<h2>STEP04: Code the detail page</h2>
<p>Code the detail page. Please code main.ts referring to the code below</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br>  <span class="token comment">/**<br><span class="highlight-line">   * main.ts is called from both the list page and the detail page. </span><br><span class="highlight-line">   * So you need to separate the processing for each</span><br>   */</span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">// Warning: The processing of the list page created in the first time moves to this if statement</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">//„ÄÄWrite the processing of the detail page from here</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-tokens"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token comment">// Get the creator's address from the GET parameter of the URL</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorAddress <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'creator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get creator information using dev-for-app</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span>creatorAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Creating HTML to display creator information</span></span><br>    <span class="token keyword">const</span> profileElementString <span class="token operator">=</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">        &lt;img class="mb-4 rounded-circle border border-3 border-dark" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>portrait<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="creator image" width="168" height="168" style="object-fit: contain"></span><br><span class="highlight-line">        &lt;p class="mb-0 fs-5"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br>    `</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"creator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    creatorHTMLElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> profileElementString<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get HTML to display token information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> tokensHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tokens"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get the token list from Data Viewer</span></span><br><span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> token <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getTokens</span><span class="token punctuation">(</span>creatorAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token comment">// Get an image of the token</span></span><br><span class="highlight-line">      <span class="token keyword">const</span> tokenInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPropertiesInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>property<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">continue</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">const</span> image <span class="token operator">=</span> tokenInfo<span class="token punctuation">.</span>cover_image <span class="token operator">?</span> tokenInfo<span class="token punctuation">.</span>cover_image<span class="token punctuation">.</span>url <span class="token punctuation">:</span> <span class="token string">""</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment">// Creating HTML to display token information</span></span><br><span class="highlight-line">      <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br>      div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">            &lt;article class="mt-4 mb-3 d-flex"></span><br><span class="highlight-line">                &lt;img class="me-3" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="token image" width="128" height="96" style="object-fit: contain"></span><br><span class="highlight-line">                &lt;div class="d-flex flex-column justify-content-between"></span><br><span class="highlight-line">                   &lt;p class="fs-6"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br><span class="highlight-line">                   &lt;div class="d-flex"></span><br><span class="highlight-line">                        &lt;button type="button" class="me-3 btn btn-lg btn-primary" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="1">1 DEV&lt;/button></span><br><span class="highlight-line">                        &lt;button type="button" class="me-3 btn btn-lg btn-success" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="5">5 DEV&lt;/button></span><br><span class="highlight-line">                        &lt;button type="button" class="btn btn-lg btn-danger" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="10">10 DEV&lt;/button></span><br><span class="highlight-line">                   &lt;/div></span><br><span class="highlight-line">                &lt;/div></span><br><span class="highlight-line">            &lt;/article></span><br>        `</span></span><span class="token punctuation">;</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">const</span> tokenHTMLElement <span class="token operator">=</span> div<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment">// Add to tokens html</span></span><br><span class="highlight-line">      tokensHTMLElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tokenHTMLElement<span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The code from here is added below the above code. Or you can code it in another file and then import it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getPropertiesInfo</span><span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        address<span class="token punctuation">:</span> address<span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/properties?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTokens</span><span class="token punctuation">(</span><span class="token parameter">creator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(where: {author: {_eq: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}}) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                        name</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the coding so far and a few modifications, the page is complete.<br>
<img src="/images/posts/20210305/pic03.png" alt="tokens page"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This time, I got the token information that the creator has from Data Viewer, got the image of the token from dev-for-app, and made a detail page. You may be accustomed to using Data Viewer and dev-for-app.<br>
Next time, I would like to process staking to tokens and create a connection with my wallet.<br>
Thank you.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>What is Dev Protocol Treasury?</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-treasury/"/>
    <updated>2021-03-03T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-treasury/</id>
    <content type="html"><![CDATA[
      <h2>What is Dev Protocol Treasury?</h2>
<p>The Dev Protocol Treasury is managed by the community to be used for the ecosystem.</p>
<p>It was initiated by <a href="https://medium.com/devprtcl/community-proposal-implement-a-creator-token-fee-to-create-an-oss-etf-d74386909339" target="_blank" rel="noopener">community proposal and vote</a>.</p>
<p>A 5% fee for Property tokens(Total Supply:10M) upon minting will be sent to Dev Protocol Treasury. Since Creator token holders receive the proportional amount of Creator rewards the Dev Protocol treasury will receive 5% of Creator rewards. The OSS token and DEV tokens received will be held in the Dev Protocol treasury which will eventually be governed by the community.</p>
<h2>Usage of Dev Protocol Treasury</h2>
<ul>
<li>
<p>OSS ETF<br>
Dev Protocol Treasury will transform into an OSS ETF since it holds an underlying basket of tokenized OSS(property tokens). The DEV tokens‚Äô value should form a linear relationship with the valuations of the Creator tokens held in the Dev Protocol treasury. The DEV token can provide exposure to the OSS market on Dev Protocol and solve fragmentation.</p>
</li>
<li>
<p>Meta-Governance &amp; Utility<br>
Today, Github users tokenize their OSS projects to participate in receiving Dev Protocol‚Äôs inflationary funding. We expect soon that OSS projects will build governance and utility capabilities for their Creator token. Since Dev Protocol would have an underlying portfolio of creator tokens we could extend voting power and utility to DEV token holders. That allows OSS dependent projects or foundations to simply buy DEV tokens to have voting power in a basket of OSS projects.</p>
</li>
<li>
<p>Incentives for maintainers<br>
Open source software is the technological infrastructure of today‚Äôs world. OSS projects that are underdeveloped or funded can become a security risk to its dependents. The Dev Protocol community could bootstrap growth by starting commit farming or liquidity mining programs.</p>
</li>
</ul>
<p>‚ÄªThese are just some examples and may vary depending on the development roadmap.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>What is Protocol?</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-protocol/"/>
    <updated>2021-02-27T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-protocol/</id>
    <content type="html"><![CDATA[
      <p>Hi, I‚Äôm aggre.</p>
<p>Dev Protocol is a tool built on Ethereum. It is a system which replaces the traditional model of donations for OSS funding. The protocol we've built creates opportunities to monetize OSS projects by allowing people from anywhere in the world to stake their cryptocurrency on verified GitHub repositories, where both patrons and OSS projects receive an annual percent return, paid in tokens. Additionally, our protocol can tokenize OSS projects creating a unique incentive model for development from the community. It‚Äôs important to understand that this is not a platform, but a protocol. We intentionally included the word in our name to differentiate ourselves from web services or platforms. We aren't normally ones to delve deeply into research on the semantics behind a name, but in this case, it's an important distinction to make.</p>
<h2>Protocols currently in existence</h2>
<p>A great start to get the idea of Dev Protocol is to look for similarities in the internet's ecosystem:<br>
In the modern world of the internet, we see many types of web service using various digital payment for monetization. Most of the service is paid with credit cards, for example, ‚ÄúAlice pays X dollars for Bob‚Äù.</p>
<p>A protocol called ISO8583 is used for credit card payment. Since it is a payment via the internet, protocols such as TCP, IP, SSL and TSL are used as well. The money transfer from Alice to Bob is one type of protocol. There are a lot of protocols, but the meaning of each protocol is not so necessary! The fact that the web as we know it is composed of a group of protocols is an important point.</p>
<p>Let‚Äôs say a person is launching an e-commerce store without utilizing any existing protocols. Would it be an &quot;e&quot; commerce store? Would it be able to exist at all without all of the modern internet protocols we use every day without realizing? This is a rhetorical question, but for the sake of clarity, the answer is no, it would be completely useless, disconnected from the world, unreachable, unusable, and practically non-existent. The web protocols are a critical component of the internet, where as a web service is merely a convenient product, where, without it, the core functionality of the web would not change.</p>
<p>I think you get the idea on the difference between ‚Äúweb service‚Äù and ‚Äúprotocol‚Äù.</p>
<h2>What‚Äôs Dev Protocol used for?</h2>
<p>Dev Protocol enables people to monetize open assets such as OSS, Open Access, etc. It is a kind of function that replaces arrangements like ‚ÄúAlice pays X dollars for Bob‚Äù mentioned in the previous chapter.</p>
<p>The difference between open assets and mugs sold at an online shop is that people cannot receive payment as a compensation for the service of open assets. Creators of open source software release these high value pieces of technology with good intentions, knowing full well that they will have to earn their living from another source of income. There is a disconnect between the ease of using such software, and how to fund it. Imagine if there was an ecosystem where everyone was rewarded monetarily for participating in creating/funding.</p>
<p>Conventionally, the biggest chance for monetization that people can rely on with open assets was donation. Donation itself is one of the greatest protocols. However, we thought it inappropriate that open assets rely on a single protocol. That‚Äôs why we developed Dev Protocol.</p>
<h2>What can we do with Dev Protocol?</h2>
<p>Briefly speaking, it‚Äôs like this : ‚ÄúBoth Alice and Bob gain an income without money transfer.‚Äù Oh, please don‚Äôt think that I‚Äôve turned into an enigmatic alien from outer-space!</p>
<p>It sounds crazy but it's true, the income here is not cash but crypto assets called DEV. DEV is inflating slowly, in other words, it increases the total amount of supply gradually. Its new supply is allocated to people depositing DEV into the repositories of OSS creators. Depositing is usually called ‚ÄúStaking‚Äù.</p>
<p>Patrons who have staked their DEV receive additional DEV tokens as a reward. For example, if the staked DEV is 100%, the total DEV with new supply becomes 120%. OSS creators receive the new supply of DEV in proportion to the number of staking that they‚Äôve obtained.</p>
<p>Let me organize what I‚Äôve talked to you so far in the next chapter.</p>
<h2>Who uses Dev Protocol?</h2>
<p>There are 3 types of people.</p>
<ol>
<li>Authors</li>
<li>Patrons</li>
<li>Maintainers</li>
</ol>
<p>Their description is as follows:</p>
<p><strong>Authors</strong><br>
Authors do activities that are subject to patrons‚Äô support. Open source developers, researchers and creators are categorized as such people. Authors gain owner reward in proportion to the obtained number of staking.</p>
<p><strong>Patrons</strong><br>
Patrons stake on OSS projects in order to support authors‚Äô activities. Patrons gain staking rewards in return for supporting authors.</p>
<p><strong>Maintainers</strong><br>
Maintainers help develop the protocol, authenticating authors‚Äô activities, and improve the core of Dev Protocol.</p>
<h2>Are we Dev Protocol?</h2>
<p>I think you‚Äôve already noticed that protocols are not developed by certain companies, as I touched on it in the previous chapter. The internet is never composed of only one company.</p>
<p>Dev Protocol is maintained by Frame00, a Japanese company, currently. However, its control over the protocol is going to slowly dwindle little by little in the process of ‚Äúdecentralization‚Äù, which would take 6 months to 1 year and a half, as we give control over to the community.</p>
<p>As long as Dev Protocol is a protocol, its  existence is like that of the internet (TCP/IP) or SSL/TSL, so it shouldn‚Äôt be developed for sales by a single commercial company.</p>
<h2>Maintenance without administrators</h2>
<p>Our idea is that a system maintained by people meeting and parting based on incentives is more sustainable in terms of neutrality and permanence, rather than a maintenance system that relies on a legal body.</p>
<p>The reason why we adopted Ethereum as the basis for Dev Protocol is the same. Since Ethereum is one of the decentralized computing, it runs without administrators.</p>
<p>That means, in case we‚Äôre all run over by a bus, Dev Protocol continues to operate normally. When it comes to the adequacy of a protocol, such function should be required, and have no single point of failure.</p>
<h2>What can developers do?</h2>
<p>If you have an idea for an open source project but lack funds or funding to accomplish your goals, Dev Protocol may be the tool for you.</p>
<p>You can also create monetizing service on the web for users such as Authors and Patrons. There is no need to pay commission for the protocol, and no restriction like API limit. You can work as a Maintainer to develop a protocol itself. There aren‚Äôt so many codes required.</p>
<p>We have a more consise overview of Dev Protocol in our documentation here: <a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">https://docs.devprotocol.xyz/dev-protocol/</a></p>
<p>For those who want to know more about Dev Protocol, I‚Äôm preparing an article about decentralized protocols for my next entry.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (1/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210226/"/>
    <updated>2021-02-26T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210226/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
Dapp will list the creators of OSS projects that are tokenized by the Dev Protocol, then display the tokens of those creators, and then create a staking function.</p>
<ul>
<li>Step1: <a href="#section-1">Prepare the development environment</a></li>
<li>Step2: <a href="#section-2">Get a list of creators using Data Viewer</a></li>
<li>Step3: <a href="#section-3">Get creator information using dev-for-apps</a></li>
<li>Step4: <a href="#section-4">Code the list page</a><br>
<a name="section-1"></a></li>
</ul>
<h2>Prepare the development environment</h2>
<p>First, let's prepare a development environment. I have prepared the sample code for this tutorial on Github, so please use it.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">git clone https://github.com/kazu80/tokener-find.git -b sample-code-v1.5.2</span></code></pre>
<p>Run npm after clone</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">cd tokener-find</span><br><span class="highlight-line">npm install</span></code></pre>
<p>After that, execute the following command to start the site locally</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npx webpack</span><br><span class="highlight-line">npx webpack serve</span></code></pre>
<h2>Overview of the application</h2>
<p>This application has the following 2 pages</p>
<ul>
<li>Creator list page</li>
<li>Creator details page</li>
</ul>
<p>On the creator details page, Display the tokens owned by the creator and select and staking tokens.</p>
<p><img src="/images/posts/20210226/pic01.png" alt="Complete image"><br>
‚Äª The html file under the src directory is this screen<br>
‚Äª If you want to see how it works, you can also check it from <a href="https://kawakami.dev/lab/tokens/" target="_blank" rel="noopener">here</a></p>
<p>This time, I would like to create a creator list page.</p>
<h2>Creating a creator list page</h2>
<p>The Dev Protocol tokenizes OSS projects. So to get a list of creators, you need to filter all tokens by Author name.<br>
<a name="section-2"></a></p>
<h3>Get a list of creators using Data Viewer</h3>
<p>Token information can be gotten from Data Viewer</p>
<blockquote>
<p>Please refer to the linked document for <a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">Data Viewer</a></p>
</blockquote>
<p>You can get a list of creators with the endpoints and queries below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">// endpoints</span><br><span class="highlight-line">https://api.devprtcl.com/v1/graphql</span><br><span class="highlight-line"></span><br><span class="highlight-line">// query</span><br><span class="highlight-line">query Properties {</span><br><span class="highlight-line">    property_meta(distinct_on: author) {</span><br><span class="highlight-line">        property</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p>This is a sample to get a list of creators using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> allCreatorInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span></code></pre>
<p>The data is in JSON format as shown below</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">{</span><br><span class="highlight-line">    "data": {</span><br><span class="highlight-line">        "property_meta": [</span><br><span class="highlight-line">            {</span><br><span class="highlight-line">                "author": "Creator address"</span><br><span class="highlight-line">            },</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        ]</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p><a name="section-3"></a></p>
<h3>Get creator information using dev-for-apps</h3>
<p>Data Viewer can only get the creator's address. I also want to use the creator's name and image on the list page, so get the information from dev-for-apps</p>
<blockquote>
<p>dev-for-apps is an API that get creator information and token information.</p>
</blockquote>
<p>Create a URL and make a GET request</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">https://dev-for-apps.azureedge.net/accounts?address="Creator address"</span></code></pre>
<p>Get creator information using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> <span class="token string">"Creator address"</span><span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></code></pre>
<p>The data is in JSON format as shown below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">[</span><br><span class="highlight-line">    {</span><br><span class="highlight-line">        "name": "name",</span><br><span class="highlight-line">        "portrait": {</span><br><span class="highlight-line">            "url": "profile image URL",</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        },</span><br><span class="highlight-line">        ...</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">]</span></code></pre>
<p>The dev-for-apps API can get a lot of other information.</p>
<p><a name="section-4"></a></p>
<h3>Code the list page</h3>
<p>Coding the creator list page using the gotten data.<br>
If you put all the sample code that follows in <code>src/assets/ts/main.ts</code>, the creator list will be displayed.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">// Get a list of creators from Data Viewer</span></span><br><span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> info <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get creator information using dev-for-app</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>creatorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">continue</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Creating HTML to display creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">        &lt;article class="row mt-4 mb-3"></span><br><span class="highlight-line">            &lt;div class="col-10 d-flex align-items-center"></span><br><span class="highlight-line">                &lt;img class="rounded-circle me-3" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>portrait<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="creator image" width="60" height="60" style="object-fit: contain"></span><br><span class="highlight-line">                &lt;p class="fs-6"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br><span class="highlight-line">            &lt;/div></span><br><span class="highlight-line">            &lt;a href="tokens.html?creator=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="col-2 d-flex align-items-center justify-content-center btn btn-primary">TOKEN&lt;/a></span><br><span class="highlight-line">        &lt;/article></span><br>    `</span></span><span class="token punctuation">;</span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfoHTMLElement <span class="token operator">=</span> div<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get a tag to insert creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorsHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"creators"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    </span><br><span class="highlight-line">    creatorsHTMLElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>creatorInfoHTMLElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The code from here is added below the above code. Or you can code it in another file and then import it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token string">"X-Requested-With"</span><span class="token punctuation">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    body<span class="token punctuation">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>      query<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`<br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            `</span></span><span class="token punctuation">,</span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span><span class="token parameter">creatorAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token punctuation">:</span> creatorAddress<span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token punctuation">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'portrait'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>portrait<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the coding so far and a few modifications, the page is complete.<br>
<img src="/images/posts/20210226/pic02.png" alt="list page image"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This time, using the two libraries provided in the Dev Protocol, we acquired creator information and detailed information.<br>
<a href="https://initto.devprotocol.xyz/posts/20210305/" target="_blank" rel="noopener">Next time</a>, we will create a detailed page for creators.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol documentation information</title>
    <link href="https://initto.devprotocol.xyz/posts/20210215/"/>
    <updated>2021-02-15T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210215/</id>
    <content type="html"><![CDATA[
      <p>We would like to inform you of the currently available Dev Protocol documentation.</p>
<h2>Development documentation</h2>
<p>Here‚Äôs a summary of Dev Protocol‚Äôs features.</p>
<p><a href="https://github.com/dev-protocol/protocol/blob/main/README.md" target="_blank" rel="noopener">dev-protocol/protocol</a></p>
<p>Once set up, you will be able to use the functions provided by the Dev Protocol. Please use it when you want to use the Dev Protocol contract in Dapp development.<br>
The document above is a README, so please refer to the following link for more details.</p>
<p><a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">Development documentation</a></p>
<blockquote>
<p>p.s. There is an old part in the content of the document, so if you do not understand, please ask at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a></p>
</blockquote>
<h2>dev-kit Document</h2>
<p><code>dev-kit</code> is a library for using the functions of Dev Protocol from JavaScript (TypeScript).</p>
<p><a href="https://www.npmjs.com/package/@devprotocol/dev-kit" target="_blank" rel="noopener">dev-kit</a></p>
<p>Please use it when you want to use the Dev Protocol contract from the front end of the application.</p>
<h2>Dev Protocol Data Viewer</h2>
<p>With <code>Data Viewer</code>, You can acquire various data of Dev Protocol by using GraphQL.</p>
<p><a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer</a></p>
<h3>Query Builder</h3>
<p><a href="https://explorer.graphql.devprotocol.xyz/" target="_blank" rel="noopener">https://explorer.graphql.devprotocol.xyz/</a></p>
<p>The information in the document is updated from time to time. If you have any questions, or feel a difficulty in understanding the text, please let us know at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a>.</p>

    ]]></content>
  </entry>
	
</feed>
