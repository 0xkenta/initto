<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>INITTO</title>
	<subtitle></subtitle>
	<link href="https://initto.devprotocol.xyz/feed.xml" rel="self"/>
	<link href="https://initto.devprotocol.xyz/"/>
	
	<updated>2021-02-15T00:00:00+00:00</updated>
	
	<id>https://initto.devprotocol.xyz</id>
	<author>
  <name>devprotocol team</name>
  <email></email>
	</author>
	
  
  <entry>
    <title>Welcome to DEV&#39;s ecosystem</title>
    <link href="https://initto.devprotocol.xyz/posts/welcome-to-dev-ecosystem/"/>
    <updated>2021-07-12T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/welcome-to-dev-ecosystem/</id>
    <content type="html"><![CDATA[
      <p><img src="/images/posts/welcome-to-dev-ecosystem/1.jpeg" alt="Welcome to DEV's ecosystem!"></p>
<p>DEV token is a crypto asset designed to support OSS. (Open Source Software)</p>
<p>Dev Protocol was created with the use of blockchain technology as a system to realize continuous support for all creators. DEV token is a crypto asset issued by Dev Protocol.<br>
Staking is like depositing your money to banks. As you may know, you’ll get interest for your deposited money. For DEV, if you deposit DEV token (money) to OSS (banks), you’ll get interest. The interest will be shared with developers, that means, interest for developers (reward) will be a donation for developers.</p>
<h2>A system for continuous support</h2>
<p>Staked DEV token is in the condition of being deposited. It doesn’t neither decrease or diminish because it’s deposited. You can also withdraw it whenever you want to. While DEV token is deposited, both supporters and developers get interest. In other words, you’ll get more benefit from depositing it rather than owning it.<br>
Once you withdraw your DEV token, the increase of interest stops. Therefore, for supporters, they get more profit by depositing instead of withdrawing. In addition, the interest will be added for developers, which result in a donation for them. Dev Protocol realizes continuous support for developers with this system.</p>
<h2>A system that rewards developers</h2>
<p>The mechanism for earning interest on supporter and developer tokens is realized by dividing the interest earned from the supporter’s staking between the developer and the supporter. In other words, if both the supporter and the developer have an annual rate of 30%, the supporter’s staking will generate 60% interest, which will be divided between the developer, and the supporter equally (which in this case equates to a rate of 30% each).</p>
<h2>Interest rate</h2>
<p>Interest for supporters will be given at the interest rate of approximately 30% per year (as of June 12th, 2021)†1. Reward for creators is donated at the interest rate of abou 30% per year (as of June 12th, 2021)†2.<br>
You can see how high DEV’s interest rate is compared with that of banks.</p>
<h2>How to stake</h2>
<p>When you start to stake, you need to find projects that you want to support at Stakes.social. Find projects that you want to support from Project List Page.<br>
To find your favorite projects, you can just search with key words of OSS names, or check the profiles of OSS at OSS introduction page (In this page, you can also find a link to Github, and it might be a great idea if you read README file there.)</p>
<p><img src="/images/posts/welcome-to-dev-ecosystem/2.jpeg" alt="Welcome to DEV's ecosystem!"></p>
<p>When you find a project that you want to support, press “Stake” button, and then a screen of staking is displayed. You can find an application form to input the amount of staking in the modal, so please input the number of DEV for staking. After you’ve completed to input and double-checked the amount, please click “Stake” button.<br>
If you press “Stake” button, your wallet will be activated to check the status of transaction and gas fee to process transaction.</p>
<p><img src="/images/posts/welcome-to-dev-ecosystem/3.jpeg" alt="Welcome to DEV's ecosystem!"></p>
<p>At the platform on Ethereum, you’ll need a commission for transaction (gas fee) to complete it. Since Dev Protocol is designed on the platform of Ethereum, you’ll need a commission. Please prepare the fee for it beforehand.</p>
<p>After the transaction is done and your staking is completed, you can see a message, “success staking!”.</p>
<p><img src="/images/posts/welcome-to-dev-ecosystem/4.jpeg" alt="Welcome to DEV's ecosystem!"></p>
<p>This message means that your DEV is deposited to the OSS project that you want to support.<br>
Deposited DEV receive interest at the interest rate of around 30% per year (as of June 12th, 2021)†1, and Developers receive DEV token at the interest rate of approximately 30% (as of June 12th, 2021)†2.</p>
<p>The longer you continue staking, the longer developers with your support can devote themselves to their development much more than before, which results in your profit as one of their supporters and in continuous support for developers. We’d highly recommend you to stake as long time as possible for their continuous development.</p>
<hr>
<p>†1 Since the interest for supporters always fluctuate, please check STAKER APY at the following website if you want to know the current rate per year.<br>
<a href="https://stakes.social/stats" target="_blank" rel="noopener">https://stakes.social/stats</a></p>
<p>†2 Since the interest for creators always fluctuate, please check CREATOR APY at the following website if you want to know the current rate per year.<br>
<a href="https://stakes.social/stats" target="_blank" rel="noopener">https://stakes.social/stats</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol Incentives explained with Game Theory</title>
    <link href="https://initto.devprotocol.xyz/posts/20210709/"/>
    <updated>2021-07-09T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210709/</id>
    <content type="html"><![CDATA[
      <p><img src="/images/posts/20210709/ogp.png" alt="Dev Protocol Incentives explained with Game Theory"></p>
<p>We often get asked why you should use <a href="https://devprotocol.xyz/" target="_blank" rel="noopener">Dev Protocol</a> as a form of funding Open Source Software - OSS - Projects instead of just making a simple donation. I'll try to explain, through a simple Game Theory example, the incentives that Dev Protocol creates that makes it, for some people, a superior option to sustainably fund those projects.</p>
<p>To show each particular incentive and differentiate them in this model, this will be a static game, prices are constant and the players can only choose to either use Dev Protocol or Donate. Just to be clear, in real life, when you join Dev Protocol, you're not required to give up donations, in fact you can and should accumulate both benefits.</p>
<h2>The Game</h2>
<p>Suppose there are 2 players, one is the Creator and the other is the Philanthropist. The latter dedicates $100 of his monthly income to donate to his favorite Open Source Software Creator. Financially the amount he donates gives him a - <strong>$100</strong> payoff, but, let's say that the satisfaction of donating to his favorite project is equivalent to him to a <strong>+$100</strong> payoff. The net payoff for him would be <strong>$0</strong>.</p>
<p><img src="/images/posts/20210709/2.png" alt="Dev Protocol Incentives explained with Game Theory"></p>
<p>Now consider that a Creator has his project pool on <a href="https://stakes.social/" target="_blank" rel="noopener">stakes.social</a> and only accepts DEVs. In this case potential Philanthropists who either did not afford to be altruistic or did not get the sufficient satisfaction from being altruistic to justify a donation might get the incentive to finance that project.</p>
<p>Let's say that the Philanthropists stakes the sufficient amount of <a href="https://docs.devprotocol.xyz/stakes-social/token-guide/" target="_blank" rel="noopener">DEV tokens</a> that the Monthly Percentage Yield equals <strong>$100</strong>. In this case he gets both the <strong>+$100</strong> from the staking rewards AND the +$100 from the satisfaction of donating for his favorite project.</p>
<p><img src="/images/posts/20210709/3.png" alt="Dev Protocol Incentives explained with Game Theory"></p>
<p>So in this game, both strategies Dev Protocol:Dev Protocol and Donation:Donation are Nash Equilibria. But, when the Philanthropist deviates his strategy to Dev Protocol he has a better payoff, making it the <strong>dominant, optimal, strategy.</strong></p>
<h3>Reality</h3>
<p>In reality, like I've said in the beginning, the Creator can accept both Dev Protocol and the Donations as way to finance his projects, and they both have a place in the Creator Economy. That is, they are not and should not be Mutually Exclusive.</p>
<p>The person that chooses to use <strong>Dev Protocol</strong> as a way to support an OSS project will have to:</p>
<p>Learn how to use<br>
To get a present $100 monthly donation, the individual will have to have the intertemporal vision that they have to currently stake 344 DEV, which costs $3440 today.<br>
The good this is:</p>
<p>Dev Protocol is still fairly new and unknown, it is sitting at a $10 Million Market Cap, which is extremely undervaluedfor all the problems it already solves.<br>
Since the token price isn't constant, that initial purchase to sustainably finance their favorite project might even 10-100x in the future, as the Protocol grows, so getting in early might let you fund that project with $1000 or even $10000 monthly rewards, which couldn't be possible with regular donations.<br>
Since you will also get paid, you might treat this not only as Philanthropy but as an investment, which might change the way you see how projects are funded and incentivize you to help them even more.<br>
Individuals might prefer each method and both have their own benefits and places.</p>
<p>I choose to use Dev Protocol.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Blockchain Basics - for Creators</title>
    <link href="https://initto.devprotocol.xyz/posts/blockchain-basics/"/>
    <updated>2021-06-29T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/blockchain-basics/</id>
    <content type="html"><![CDATA[
      <h2>Iterative Glossary for Creators</h2>
<p>This is an iterative article, that is, I'll keep adding or removing content constantly based on questions or suggestions from community members and specially OSS developers and creators. If you have a suggestion, to change the glossary, add a new article or video for a subject, feel free to comment or message me. Ideally it should change every day, I'll keep updating it.</p>
<p>The blockchain technology and the cryptocurrency universe are unique, the space is minimally restricted or constrained by regulation, it is a trust-minimized environment where individuals are free to create, to transact between themselves. Different from anything else ever seen in human history, the costs of creating something new, without requiring validation from third parties, are low. The fierce competition between creators in a totally free decentralized market maximizes innovation as projects always need to be active to stay relevant, since everything is changing extremely fast and new projects, concepts, competition are born every day.</p>
<p>This is the most fertile space for creators, they are free to create anything, just limited by their own creativity. The environment that maximizes the freedom to create and innovate, is ideal for Creators to grow and correctly rewarded for the impact they cause in the world.</p>
<h3>What is Blockchain</h3>
<p>The Bitcoin whitepaper published in November 2008, introduced revolutionary concepts, such as a purely peer-to-peer digital currency that doesn't need a trusted third party, financial institution or central issuer. The main technology behind it is the proof-of-work blockchain, a public digital and immutable ledger, shared by all nodes of that system. For the first time, in an open, decentralized network, participants didn't need to know and trust each other to verify electronic transactions, which are made through cryptographic algorithms that can be correctly verified and corrected even if attacked by malicious nodes.</p>
<p>Since then, innumerous blockchains were built, Ethereum, Cardano, Polkadot and now Binance Chain are some examples of the biggest blockchains projects at the moment.</p>
<p>Ethereum still is the blockchain with most prestige, and where significant innovation occurs. With over active 2,300 developers , trends like cryptokitties, DeFi, NFTs, DAOs.</p>
<p><a href="https://www.youtube.com/watch?v=yubzJw0uiE4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=yubzJw0uiE4</a></p>
<h3>Smart Contracts</h3>
<p>Is program stored on a blockchain - Ethereum for example- that is automatically executed every time some sort of event specified on that contract triggers it. The main benefit of using Smart Contracts is that you don't need a third party to execute it or human intervention, all the terms of the contract are on the code itself.</p>
<p><a href="https://www.youtube.com/watch?v=pWGLtjG-F5c" target="_blank" rel="noopener">https://www.youtube.com/watch?v=pWGLtjG-F5c</a></p>
<h3>Ethereum</h3>
<p>Ethereum is a community-ran, open source, technology or computing infrastructure, that let's you execute smart contracts, send cryptocurrencies to anyone by paying a small fee called gas.</p>
<p>Since Ethereum is programmable, you can use it for way more than just use it as money or for payments.</p>
<p><a href="https://ethereum.org/en/what-is-ethereum/" target="_blank" rel="noopener">https://ethereum.org/en/what-is-ethereum/</a></p>
<p><a href="https://www.youtube.com/watch?v=TDGq4aeevgY&amp;t=3s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=TDGq4aeevgY&amp;t=3s</a></p>
<h3>Gas</h3>
<p>Gas is the fee that is required to run computational resources to successfully execute a transaction on Ethereum.</p>
<p><a href="https://www.youtube.com/watch?v=Yh8cHUB-KoU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Yh8cHUB-KoU</a></p>
<h3>Wallets</h3>
<p>Wallet is where you store the keys and the dapp that allows you to access your crypto currencies. When you 'hold' cryptocurrencies in your wallet, you are the only person who has sovereignty over it, as long as you have your private keys.</p>
<p><a href="https://www.youtube.com/watch?v=JCYIFtb8DwM&amp;t=2s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=JCYIFtb8DwM&amp;t=2s</a></p>
<h3>Centralized Exchange (CEX)</h3>
<p>A Centralized Exchange is, just like a common broker, a trusted middle man or third party that sells the service of having the custody of assets of individuals and creates the market - exchange- where these individuals can trade between themselves through orderbooks.</p>
<h3>Decentralized Exchanges (DEXs)</h3>
<p>Differently from CEX, DEXs are exchanges that connect users directly, there is no middle man. Users have control, sovereignty over their own tokens, and can connect their wallets to the exchange dapp to trade between themselves usually through pools instead of orderbook.</p>
<p><a href="https://www.youtube.com/watch?v=LpjMgS4OVzs" target="_blank" rel="noopener">https://www.youtube.com/watch?v=LpjMgS4OVzs</a></p>
<h3>NFT (Non-fungible Tokens)</h3>
<p>Non-fungible Tokens are tokens that have unique characteristics or properties. Things like visual art, music, collectible items, games, are rapidly being tokenized into NFT since it is a way to represent and verify the ownership of those items.</p>
<p><a href="https://www.youtube.com/watch?v=Xdkkux6OxfM&amp;t=1s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Xdkkux6OxfM&amp;t=1s</a></p>
<h3>Fungible Tokens</h3>
<p>Fungibility is an economic term that describes a good or a commodity that are mutually interchangeable with an identical item. So, Fungible Tokens are tokens that don't hold any uniqueness intrinsic to them, individually, and can't be distinguished from another one of it's kind. Some examples of Fungible currencies or tokens are: bank notes from a specific country with the same denomination; an ERC-20 token, they have the exact the same type and have the same value.</p>
<p><a href="https://www.youtube.com/watch?v=wViZBS9wM9o" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wViZBS9wM9o</a></p>
<h3>Governance Tokens</h3>
<p>Governance Token holders can vote directly on proposals that decides the future of the Protocol or platform. Through governance tokens, every holder had their say and the right to vote on changes, proposals and decisions of that DAO.<br>
<a href="https://coinmarketcap.com/alexandria/glossary/governance-token" target="_blank" rel="noopener">https://coinmarketcap.com/alexandria/glossary/governance-token</a></p>
<h3>DAO</h3>
<p>Decentralized Autonomous Organization - DAO - is an organization or internet-based business run by rules created by their members through consensus, everything coded into smart contracts. Access to the treasury, proposals and decisions are all voted, usually by the governance token holders.<br>
<a href="https://ethereum.org/en/dao/" target="_blank" rel="noopener">https://ethereum.org/en/dao/</a></p>
<p><strong>Keep Asking Questions!</strong><br>
Discord👾 <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">https://discord.gg/VwJp4KM</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol AMA</title>
    <link href="https://initto.devprotocol.xyz/posts/information-ama-02/"/>
    <updated>2021-05-10T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/information-ama-02/</id>
    <content type="html"><![CDATA[
      <h1>Dev Protocol AMA #2</h1>
<p>Dev Protocol AMA # 2 will be held on the following dates.<br>
Post future development plans, technical questions, etc. about the Dev Protocol</p>
<h2>Holding period</h2>
<p>2021/05/10 - 2021/05/14</p>
<h2>Question method</h2>
<p>If you would like to ask a question about Dev Protocol, please use the form below.</p>
<iframe src="https://app.sli.do/event/qfxihzbn" height="100%" width="100%" frameBorder="0" style="min-height: 560px;" title="Slido"></iframe>
<p>You can also ask questions from the URL below<br>
<a href="https://app.sli.do/event/qfxihzbn" target="_blank" rel="noopener">https://app.sli.do/event/qfxihzbn</a></p>
<h2>About the answer</h2>
<p>Answers will be given at any time<br>
We will continue to answer even after the holding period has passed</p>
<h2>Prohibited matter</h2>
<p>AMA prohibits questions and remarks that fall under the following, and if found, we will take measures such as deleting it without permission.</p>
<ul>
<li>Remarks related to the price of DEV</li>
<li>Remarks recommending investment</li>
<li>Remarks showing superiority or inferiority in experience and level</li>
<li>Remarks that show the difference in education</li>
<li>Remarks that express socio-economic status</li>
<li>Remarks that are judged by nationality</li>
<li>Remarks such as appearance, race, religion, or gender identity and sexual orientation<br>
Use of sexual words and images</li>
<li>Insulting / derogatory comments</li>
<li>Personal or political attack</li>
<li>Public or private harassment</li>
<li>Disclosure of other people's personal information such as address without permission</li>
</ul>
<h2>Special Thanks</h2>
<p>We received ideas from many people in the community for holding this Dev Protocol AMA # 2.<br>
Thank you very match !!</p>
<p><a href="https://community.devprotocol.xyz/t/ideas-about-ama-2/87/14" target="_blank" rel="noopener">https://community.devprotocol.xyz/t/ideas-about-ama-2/87/14</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>INITTO FM#1</title>
    <link href="https://initto.devprotocol.xyz/posts/initto_fm_01/"/>
    <updated>2021-04-21T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/initto_fm_01/</id>
    <content type="html"><![CDATA[
      <h1>INITTO FM #1</h1>
<p>INITTO FM has started since April 15.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/BgPjQGlSLZs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2>What’s INITTO FM?</h2>
<p>In INITTO FM, we invite OSS developers joining Stakes.social as guest speakers, introduce them, and talk about OSS with them. The moderator for this program is Kawakami.</p>
<h2>Guest speaker</h2>
<p>We welcomed hhatto as our very first guest.<br>
hhatto is developing autopep8, which is a well-known code format tool for Phython.</p>
<p>Twitter：<a href="https://twitter.com/hhatto" target="_blank" rel="noopener">https://twitter.com/hhatto</a><br>
autopep8：<a href="https://github.com/hhatto/autopep8" target="_blank" rel="noopener">https://github.com/hhatto/autopep8</a></p>
<p>🕊 For the support of autopep8, please check the following website.<br>
<a href="https://stakes.social/0x6FC83305afb1083CE1Db511d252B47A38CFCE1f7" target="_blank" rel="noopener">https://stakes.social/0x6FC83305afb10...</a></p>
<h2>Highlights</h2>
<h3><a href="https://youtu.be/BgPjQGlSLZs?t=254" target="_blank" rel="noopener">recent interesting events</a> 4:14</h3>
<ul>
<li><strong><a href="https://deno.land/" target="_blank" rel="noopener">Deno</a></strong>
<ul>
<li><a href="https://deno.com/blog/the-deno-company" target="_blank" rel="noopener">Deno Company</a></li>
<li><a href="https://deno.com/blog/v1.9" target="_blank" rel="noopener">Deno 1.9 Release</a></li>
</ul>
</li>
</ul>
<h3><a href="https://youtu.be/BgPjQGlSLZs?t=859" target="_blank" rel="noopener">How did hhatto know Dev Protocol?</a> 14:19</h3>
<p>I heard about Dev Protocol around three years ago when it has just started tokenizing projects of npm.</p>
<h3><a href="https://youtu.be/BgPjQGlSLZs?t=1005" target="_blank" rel="noopener">OSS registered at Stakes.Social</a> 16:45</h3>
<p>I register an OSS called autopep8 at Stakes.Social. This OSS is a code format tool for Phytho, and I’ve been developing it for 10 years. Now I’m doing my best to develop its Version 2.0. It would be a major update, and I’m sure you’ll like it. You can check the situation of 2.0 in this <a href="https://www.hexacosa.net/blog/detail/194/" target="_blank" rel="noopener">blog post</a>.</p>
<h3><a href="https://youtu.be/BgPjQGlSLZs?t=1612" target="_blank" rel="noopener">What hhatto is expecting for Dev Protocol</a> 26:52</h3>
<p>I think only a few people know of Dev Protocol. It is a fantastic framework, so I hope more creators can get an idea of it. I’m looking forward to seeing the increasing number of registered projects as well as the expansion of support for Dev Protocol.</p>
<h3><a href="https://youtu.be/BgPjQGlSLZs?t=1660" target="_blank" rel="noopener">Messages for supporters</a> 27:40</h3>
<p>I really appreciate for your continuous support. Your support onwards will be an enormous help and I want to express my deepest gratitude for it. Meanwhile, I’d like you, my supporters, to oversee my activities. If there is a case where you think they aren’t worthy enough to provide any value, please feel free to change your staking to the other project. I think that’s more sensible and practical.</p>
<h2>To be continued</h2>
<p>We’ll go on with the broadcast with guest speakers of OSS developers. There is more to come for INITTO FM.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to use dev-kit-js#1</title>
    <link href="https://initto.devprotocol.xyz/posts/How-to-use-dev-kit-js-01/"/>
    <updated>2021-04-09T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/How-to-use-dev-kit-js-01/</id>
    <content type="html"><![CDATA[
      <h1>How to use dev-kit-js #1</h1>
<h2>Introduction</h2>
<p>We’ll write a series of articles on the way to use <code>dev-kit-js</code>, a library equipped in Dev Protocol. This time, we’re going to touch on how to use it in relation with Dev token.</p>
<h2>What’s dev-kit-js?</h2>
<p><a href="https://www.npmjs.com/package/@devprotocol/dev-kit" target="_blank" rel="noopener">dev-kit</a> is a library to utilize functions of Dev Protocol from JavaScript (TypeScript).</p>
<h2>Installing</h2>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npm i -D @devprotocol/dev-kit</span></code></pre>
<h2>How to use</h2>
<p>Create a client of <code>dev-kit-js</code><br>
In order to make use of <code>dev-kit-js</code> , you need to implement contractFactory and create a client. You also need Provider for contractFactory. Provider can be obtained from web3js.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">"web3/dist/web3.min"</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> provider  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> clientDev <span class="token operator">=</span> <span class="token function">contractFactory</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span>currentProvider<span class="token punctuation">)</span></span></code></pre>
<blockquote>
<p>Tips<br>
If you use web3 at <code>pure js</code>, you have to import it from <code>dist/web3.min.js</code>.</p>
</blockquote>
<p>After you’ve created a client, you can use it as stated below.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> balanceOfDEV <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDEV<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>addressWallet<span class="token punctuation">)</span></span></code></pre>
<h2>Equipped functions</h2>
<p>The following 12 types are categorized as equipped functions.</p>
<ul>
<li>allocator</li>
<li>dev</li>
<li>lockup</li>
<li>market</li>
<li>metrics</li>
<li>policy</li>
<li>policyFactory</li>
<li>policyGroup</li>
<li>property</li>
<li>propertyFactory</li>
<li>registry</li>
<li>withdraw</li>
</ul>
<h2>How to use Dev token related functions</h2>
<h3>Before you start</h3>
<p>There are several functions related to DEV token in <code>dev</code> as equipped functions.</p>
<p>You need to pass Address of DEV token as an argument to use <code>dev</code> at first.</p>
<p>You can obtain Address of DEV token as stated below.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>addresses<span class="token punctuation">,</span> contractFactory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/dev-kit"</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> registryContract <span class="token operator">=</span> clientDev<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span>addresses<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>main<span class="token punctuation">.</span>registry<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> addressDEV       <span class="token operator">=</span> <span class="token keyword">await</span> registryContract<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<p>If you need Address of Ropsten environment, check the following example.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> registryContract <span class="token operator">=</span> clientDev<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span>addresses<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>ropsten<span class="token punctuation">.</span>registry<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> addressDEV       <span class="token operator">=</span> <span class="token keyword">await</span> registryContract<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h3>name</h3>
<p><em>You can obtain the name of DEV token.</em></p>
<ul>
<li>Argument
<ul>
<li>N/A</li>
</ul>
</li>
<li>Return value
<ul>
<li>Token name<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Dev</span></span></code></pre>
<h3>symbol</h3>
<p><em>You can obtain Symbol of DEV token.</em></p>
<ul>
<li>Argument
<ul>
<li>N/A</li>
</ul>
</li>
<li>Return value
<ul>
<li>Token Symbol<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// DEV</span></span></code></pre>
<h3>decimals</h3>
<p><em>You can return the digit numbers after the decimal point that Dev token uses.</em></p>
<ul>
<li>Argument
<ul>
<li>N/A</li>
</ul>
</li>
<li>Return value
<ul>
<li>Digit numbers after the decimal point that the token uses<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> decimals <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decimals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 18</span></span></code></pre>
<h3>totalSupply</h3>
<p><em>You can return the number of issued DEV token.</em></p>
<ul>
<li>Argument
<ul>
<li>N/A</li>
</ul>
</li>
<li>Return value
<ul>
<li>The number of issued DEV token<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> totalSupply <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h3>balanceOf</h3>
<p><em>You can obtain the balance of DEV token for designated address</em></p>
<ul>
<li>Argument
<ul>
<li>Wallet address</li>
</ul>
</li>
<li>Return value
<ul>
<li>DEV token balance<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> balanceOfDEV <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>walletAddress<span class="token punctuation">)</span></span></code></pre>
<blockquote>
<p>Tips<br>
For DEV token gained through such functions as balanceOf (ERC20), 18 digits are defined as after the decimal point. Therefore, the value of DEV token is the value that is carried down by 18 digits from the value obtained. Dealing with the number having 18 digits on JavaScript leads to an overflow, so you have to use it with a library.</p>
</blockquote>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>BigNumber<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@ethersproject/bignumber"</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimals<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1000000000000000000</span></span><br><span class="highlight-line"><span class="token keyword">const</span> dev <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>decimalNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h3>transfer</h3>
<p><em>You can transfer Dev token to A.</em></p>
<ul>
<li>Argument
<ul>
<li>Wallet address you’ll transfer to</li>
<li>The number of DEV token to transfer</li>
</ul>
</li>
<li>Return value
<ul>
<li>Success or failure<boolean></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimals<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> transferDev   <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>転送する<span class="token constant">DEV</span>トークン数<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>decimalNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> transfer      <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>転送先のアドレス<span class="token punctuation">,</span> transferDev<span class="token punctuation">)</span></span></code></pre>
<h3>approve</h3>
<p><em>You can approve the transfer of DEV token from a designated address.</em></p>
<ul>
<li>Argument
<ul>
<li>Wallet address to approve transfer</li>
<li>The number of DEV token to transfer</li>
</ul>
</li>
<li>Return value
<ul>
<li>Success or failure<boolean></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimals<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> approveDev    <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>TheNumberOfDEVTokenToTransfer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>decimalNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> approve       <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>AddressToApproveTransfer<span class="token punctuation">,</span> approveDev<span class="token punctuation">)</span></span></code></pre>
<h3>allowance</h3>
<p><em>You can return the approved amount of DEV token that can be withdrawn.</em></p>
<ul>
<li>Argument
<ul>
<li>Wallet address that you approved transfer</li>
<li>Wallet address that is approved for transfer</li>
</ul>
</li>
<li>Return value
<ul>
<li>Transferable Dev token<string></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> allowance <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>addressDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowance</span><span class="token punctuation">(</span>転送を許可したウォレットアドレス<span class="token punctuation">,</span> 転送を許可されたウォレットアドレス<span class="token punctuation">)</span></span></code></pre>
<h3>transferFrom</h3>
<p><em>You can withdraw approved DEV token.</em></p>
<ul>
<li>Argument
<ul>
<li>Wallet address that you approved transfer</li>
<li>Wallet address that is approved for transfer</li>
<li>The amount to transfer</li>
</ul>
</li>
<li>Return value
<ul>
<li>Success or failure<boolean></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimals<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> transferDev   <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>TheAmountToTransfer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>decimalNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> transferFrom  <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>WalletAddressThatYouApprovedTransfer<span class="token punctuation">,</span> WalletAddressThatIsApprovedForTransfer<span class="token punctuation">,</span> transferDev<span class="token punctuation">)</span></span></code></pre>
<h3>deposit</h3>
<p><em>You can stake Dev token for property.</em></p>
<ul>
<li>Argument
<ul>
<li>Address of property to stake</li>
<li>The number of Dev to stake</li>
</ul>
</li>
<li>Return value
<ul>
<li>Success or failure<boolean></li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> decimalNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimals<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> stakingDev    <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>TheNumberOfDevToStake<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>decimalNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> staking       <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>AddressOfPropertyToStake<span class="token punctuation">,</span> stakingDev<span class="token punctuation">)</span></span></code></pre>
<h3>contract</h3>
<p><em>You can return the instance of Contact in web3js.</em></p>
<ul>
<li>Argument
<ul>
<li>N/A</li>
</ul>
</li>
<li>Return value
<ul>
<li>Contract in web3js</li>
</ul>
</li>
<li>How to use</li>
</ul>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">await</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contract</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// You can use Contract in web3js. </span></span><br><span class="highlight-line"><span class="token comment">// https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html</span></span><br><span class="highlight-line">contract<span class="token punctuation">.</span><span class="token function">defaultBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre>
<h2>Conclusion</h2>
<p>For <code>dev</code> functions of <code>dev-kit-js</code>, functions defined at ERC20 are equipped. deposit function is equipped for <code>dev-kit-js</code> as well. If you make use of deposit functions, you can start staking Dev by using a program, and you’ll be able to create a Dapp like Stakes.Social. We also have <code>Lockup.withdraw</code>, a function to terminate staking, and <code>withdraw.withdraw</code>, a function to withdraw creator reward. We’ll introduce them to you in our next article.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Issuing creator token at Stakes.social by AITG Samurai</title>
    <link href="https://initto.devprotocol.xyz/posts/issuing-creator-token-at-stakes-social/"/>
    <updated>2021-04-06T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/issuing-creator-token-at-stakes-social/</id>
    <content type="html"><![CDATA[
      <p>Hi, everyone. I’m <a href="(https://twitter.com/AITGSamurai)" target="_blank" rel="noopener">AITG(Anti Internet Tough Guy) Samurai</a>, a reincarnated Bishōjo samurai creator. I’m a member of xR Tech Nagoya, which is an event managing and creation group for metaverse space, and in charge of production business.</p>
<p><img src="/images/posts/20210406/Photo1.png" alt="画像１　xR Tech Nagoya&amp;Dev"></p>
<p>About two months have passed since we listed projects of xR Tech Nagoya at “<a href="https://stakes.social" target="_blank" rel="noopener">Stakes.Social</a>”, a new sponsoring platform. In this article, as one of the creators, I’ll explain my projects, current situation, impression and prior knowledge for those who want to join Stakes.Social as creators.</p>
<h2>Topics</h2>
<ul>
<li>01.<a href="#heading-01:-what's-stakes.social">What’s Stakes.Social?</a></li>
<li>02.<a href="#heading-02:-what's-project-hpshubs-public-scene">What’s Project HPS (Hubs Public Scene)?</a></li>
<li>03.<a href="#heading-03:-achievement-for-the-last-two-months">Achievement for the last two months</a></li>
<li>04.<a href="#heading-04:-prior-knowledge-you-should-know">Prior knowledge you should know</a></li>
<li>05.<a href="#heading-05:-future-of-hps">Future of HPS</a></li>
</ul>
<hr>
<h2>01: What’s Stakes.Social?</h2>
<p>Stakes.Social is a platform that realizes a support done by Dev, a crypto asset, for Open Source Software (OSS) projects. It is managed by <a href="https://corp.frame00.com" target="_blank" rel="noopener">Frame00 Inc.</a></p>
<p>Thanks to one of its features in which both supporters and creators can profit from the deposit of Dev, we can solve an issue of “the difficulty in continuous support and reward” by existing crowd funding and fan economy platform. Normally, some people find it impossible to give direct reward to supporters due to their non-profit quality, however, Dev will be one of the most optimal options for people who must make a huge effort to add continuity into their projects.<br>
When I first heard of it, I wanted to list “my useful hobby-like projects that are hard to monetize”.</p>
<h2>02: What’s Project <a href="https://stakes.social/0xEb51F55A80E62D6dE7598d0963614A0c85692584" target="_blank" rel="noopener">HPS（Hubs Public Scene）</a>?</h2>
<p>xR Tech Nagoya, a group that I currently join, is doing its best to produce public space where people can deal with VRSNS “Hubs” that work on browser developed by Mozilla.</p>
<p><img src="/images/posts/20210406/Photo2.png" alt="画像2　Hubs"></p>
<p>Hubs is a VRSNS in which you can use it for free without registering an account and can easily talk with anybody through voice chats as well as texts in a VR space. Users themselves become creators there, and can also show the space and each material that they’ve made to users around the world. Its service has a lot of flexibility.</p>
<p>In addition to Hubs’ flexible trait, commercial use of it is allowed as well. Since its open version that started in April 2020, there have been increasing number of cases where users utilize Hubs for business. However, when they create their spaces by contract work, they cannot open the most of their sources publicly. For general users who just want to use Hubs as a communication tool, and for conscientious creators who want to have a look at the contents of spaces, there is a lack of public spaces which are openly released on platform now.</p>
<p>Because xR Tech Nagoya had a sense of having such challenges, we launched “HPS (Hubs Public Scene)” project for the production of public space. The purpose and way of using open spaces are for festivals, seminars, education, casual meetups etc. For creators, we’ve uploaded created materials including 3D models which are the basis of the contents at GitHub.</p>
<p><img src="/images/posts/20210406/Photo3.png" alt="画像３　xR Tech Nagoya Hubs"></p>
<p>Projects: <a href="https://stakes.social/0xEb51F55A80E62D6dE7598d0963614A0c85692584" target="_blank" rel="noopener">https://stakes.social/0xEb51F55A80E62D6dE7598d0963614A0c85692584</a><br>
GitHub: <a href="https://github.com/xR-Tech-Nagoya/Hubs-Public-Scene" target="_blank" rel="noopener">https://github.com/xR-Tech-Nagoya/Hubs-Public-Scene</a><br>
Token Symbol：HPS</p>
<h3>Completely open space</h3>
<ul>
<li>Sauna space</li>
</ul>
<h3>Partially open space due to the matter of materials</h3>
<ul>
<li>Stakes.Social community space DevV</li>
</ul>
<p>Mr. Imoto, CEO of Warashibe, Mr. TAAKE from Japan crypto assets market as well as worldwide users of Stakes.Social gather at community space DevV. We manage it in order to ensure a place to communicate with and to contribute to the activities in the initial phase of DEV community.<br>
Reference (<a href="https://hide.ac/user-articles?id=v4RRrQPsujQmoWinr1zJP0tOM9F2" target="_blank" rel="noopener">hide.ac</a>)</p>
<p><img src="/images/posts/20210406/Photo4.png" alt="画像４　DevV AMA"></p>
<p>On March 18th, we held AMA of Dev Protocol. More than 20 people from all over the world visited. DevV was used for disseminating and sharing information among community members.</p>
<h2>03: Achievement for the last two months</h2>
<p>I think the amount of reward is one the most interesting topics for those who show much interest in Dev Protocol and Stakes.Social. We, xR Tech Nagoya, have received the total staking support of <strong>12,369.98 DEV</strong> for HPS as of April 1st, 2021. This amount is equivalent to a total market capitalization of approximately <strong>18.50 million JPY</strong> (1DEV = 1,500JPY). This is amazing!</p>
<p>Creators, in this case, xR Tech Nagoya, always receive creator reward little by little for fluctuating APY. For example, if APY is <strong>20% - 50%</strong> for this project, we profit <strong>minimum 3.7 million JPY or maximum 9.25 million JPY</strong> for annual reward. Of course, there is a case where APY and price themselves fluctuate in accordance with the demand for DEV or where individuals who support creators by staking terminate their staking. At this moment, we’re not sure how much we would gain for our current business after a year has passed.</p>
<p>As one of creators who list my project to Stakes.Social, I feel comfortable for having patrons while focusing on my creative activities, but at the same time, I also feel a little pressure in producing contents not to let go of such patrons. However, it is highly possible for us to increase patrons depending on our achievement, so we might feel like making a living in the system of basic income.</p>
<h2>04: Prior knowledge you should know</h2>
<p>The following list is the points where xR Tech Nagoya felt a difficulty in listing at Stakes.Social. I hope my experience would be beneficial for those who are interested in joining Stakes.Social in the future.</p>
<h3>Necessary gas fee for listing</h3>
<p>You need to pay for a commission for generated transaction when <strong>creator token</strong> is issued at the time of listing your project. In the case of xR Tech Nagoya, we paid around <strong>$250</strong> for a commission. The price would increase depending on the fluctuation of gas fee. Therefore, I think you might feel reassured if you could prepare an extra amount of ETH that is equivalent to $1,000 (0.5ETH) in MetaMask.</p>
<h3>Be aware of the project name you’ll register</h3>
<p>Our project name that we uploaded at Stakes.Social is “xR-Tech-Nagoya/Hubs-Public-Scine”. At first, an error occurred when we typed spaces at the left and right side of “/”. Since there is no comment telling you errors during the process, you should be careful for typing your project name.</p>
<h3>If you’re asked to pay for too expensive gas fee</h3>
<p>You would be asked to pay for unlikely amount for gas fee, if you have errors in the procedure of listing. As soon as you find any expensive invoice, you should carefully check whether you have errors in the project name or in other areas or not. If you’re not sure, I recommend that you should contact administrators.</p>
<p><img src="/images/posts/20210406/Photo5.png" alt="画像５　高額請求された図"></p>
<h2>05: Future of HPS</h2>
<p>We’ll continue to develop our community space DevV. We would change the style of DevV for each season, or try an experiment on it. There would be events as well to raise the awareness of DEV with community members. For the other spaces, we’ll release a number of spaces, just like DevV, where people can promote and spread blockchain project community.</p>
<p>At the time of such release, we’re thinking about producing contents which have higher quality than the current ones for Hubs by paying for 3DDG engineers from the outside of xR Tech Nagoya, if we can afford it. We always welcome your kind support and collaboration. We’d be grateful if you could choose HPS when you start your support at Stakes.Social.</p>
<p>This time we had such a great chance to share our story about Stakes.Social with you from a perspective of xR Tech Nagoya. We deeply appreciate our supporters as well as DevV users for assisting our projects. We’ll continue to watch over the growth of our projects as objectives to manage and support, and would be happy if you could utilize and play with our products. We’re looking forward to your participation!</p>
<p>Thank you for reading this article.<br>
If you have any inquiries about this article, DevV, or anything that we can help you with, please send a DM to the following Twitter.</p>
<p>＜Contact＞<br>
<a href="https://twitter.com/AITGSamurai" target="_blank" rel="noopener">Anti Internet Tough Guy侍</a><br>
<a href="https://twitter.com/i_osd1_Bonsai" target="_blank" rel="noopener">Muromachi（Representative）</a></p>
<p>＜Listed project＞<br>
<a href="https://stakes.social/0xEb51F55A80E62D6dE7598d0963614A0c85692584" target="_blank" rel="noopener">xR-Tech-Nagoya/Hubs-Public-Scene</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to acquire an OSS list with Data Viewer</title>
    <link href="https://initto.devprotocol.xyz/posts/How-to-acquire-an-OSS-list-with-Data-Viewer/"/>
    <updated>2021-03-26T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/How-to-acquire-an-OSS-list-with-Data-Viewer/</id>
    <content type="html"><![CDATA[
      <h1>How to acquire an OSS list with Data Viewer</h1>
<h2>Background</h2>
<p>A function is newly created to tweet on Twitter when OSS is registered on Dev Protocol. We’ll show it to you with codes.</p>
<h2>Outline</h2>
<p>If you use Data Viewer of Dev Protocol, you can obtain an OSS list registered at Dev Protocol. Making use of it enables you to get newly registered OSS by filtering.<br>
In order to tweet via the program, you have to use Twitter API. You need a registration for <a href="https://developer.twitter.com/en" target="_blank" rel="noopener">Twitter Developer</a> to start using Twitter API.</p>
<p>The program executes flows from the acquisition of value to tweet when it’s operated. You need to set it up so as to be executed every 15 minutes at crontab in the place like servers.</p>
<h2>Program environment</h2>
<p>We’ll use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener">javascript module</a> for the programming language of node.</p>
<h2>Obtain an OSS list from Data Viewer</h2>
<p>You can obtain a list of OSS registered at Dev Protocol from Data Viewer.</p>
<blockquote>
<p>Data Viewer is  GraphQL to acquire token information of Dev Protocol.</p>
</blockquote>
<p>It’s possible for you to acquire an OSS list registered at Dev Protocol by the following end point and query.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">// end point</span><br><span class="highlight-line">https://api.devprtcl.com/v1/graphql</span><br><span class="highlight-line"></span><br><span class="highlight-line">// query</span><br><span class="highlight-line">query Properties {</span><br><span class="highlight-line">    property_authentication(limit: 3, order_by: {block_number: desc}) {</span><br><span class="highlight-line">        authentication_id</span><br><span class="highlight-line">        property</span><br><span class="highlight-line">        property_meta {</span><br><span class="highlight-line">            name</span><br><span class="highlight-line">        }</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p>Let’s get the information by making use of fetch.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">query Properties {</span><br><span class="highlight-line">    property_authentication(limit: 3, order_by: {block_number: desc}) {</span><br><span class="highlight-line">        authentication_id</span><br><span class="highlight-line">        property</span><br><span class="highlight-line">        property_meta {</span><br><span class="highlight-line">            name</span><br><span class="highlight-line">        }</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span><br>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> listsOSS <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span></code></pre>
<p>Obtained data is a JSON format as stated below.</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token property">"property_authentication"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">            <span class="token punctuation">{</span></span><br><span class="highlight-line">                <span class="token property">"authentication_id"</span><span class="token operator">:</span> <span class="token string">"foo/bar"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">                <span class="token property">"property"</span><span class="token operator">:</span> <span class="token string">"0x0123456789012345678901234567890123456789"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">                <span class="token property">"property_meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"foo"</span></span><br><span class="highlight-line">                <span class="token punctuation">}</span></span><br><span class="highlight-line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        <span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Tweet with Twitter API</h2>
<p>You can use quite a convenient library to tweet from Node.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">$ npm install twitter</span></code></pre>
<p>For its details, see the <a href="https://github.com/desmondmorris/node-twitter" target="_blank" rel="noopener">document</a> of the library, and the following is an example use of it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">twitter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        consumer_key        <span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        consumer_secret     <span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        access_token_key    <span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        access_token_secret <span class="token operator">:</span> <span class="token string">"xxxx"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// Tweet</span></span><br><span class="highlight-line">client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'statuses/update'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>status<span class="token operator">:</span> text<span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> tweet<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span></span><br><span class="highlight-line">                <span class="token punctuation">{</span></span><br><span class="highlight-line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tweets<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">                    <span class="token punctuation">}</span></span><br><span class="highlight-line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>You can get customer_key, access_token_key etc from <a href="https://developer.twitter.com/en/portal/dashboard" target="_blank" rel="noopener">Twitter Developer Portal</a>.</p>
<p><img src="/images/posts/How-to-acquire-an-OSS-list-with-Data-Viewer/pic01.png" alt="Twitter Developer"></p>
<h2>Coding</h2>
<p>The following example is coded by referring to the above explanation.<br>
The file name of it is <code>index.mjs</code> since we’ve used javascript module.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span></span><br><span class="highlight-line"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">'fs'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> twitter <span class="token keyword">from</span> <span class="token string">"twitter"</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Make fetch available at node</span><br> */</span><br><span class="highlight-line"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Prepare a similar thing for javascript module, because _dirname can’t be used.</span><br> */</span><br><span class="highlight-line"><span class="token keyword">const</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Prepare such items as token at .env file.</span><br><span class="highlight-line"> * Read .env file by dotenv.</span><br> */</span><br><span class="highlight-line"><span class="token keyword">import</span> dotenv <span class="token keyword">from</span> <span class="token string">'dotenv'</span></span><br><span class="highlight-line">dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> dirname <span class="token operator">+</span> <span class="token string">'/.env'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Files for recording information that is once sent.</span><br> */</span><br><span class="highlight-line"><span class="token keyword">const</span> sendListFilePath <span class="token operator">=</span> dirname <span class="token operator">+</span> <span class="token string">'/data/tweet.json'</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Processing main</span><br> */</span><br><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">getClientTwitter</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>consumer_key<span class="token punctuation">,</span></span><br><span class="highlight-line">        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>consumer_secret<span class="token punctuation">,</span></span><br><span class="highlight-line">        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>access_token_key<span class="token punctuation">,</span></span><br><span class="highlight-line">        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>access_token_secret</span><br><span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> jsonObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>sendListFilePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> info <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getAllAuthenticationProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token comment">// Prevent double transmission</span></span><br><span class="highlight-line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>jsonObject<span class="token punctuation">[</span>info<span class="token punctuation">.</span>property<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'send'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                <span class="token keyword">continue</span><span class="token punctuation">;</span></span><br><span class="highlight-line">            <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">            <span class="token keyword">const</span> tweet <span class="token operator">=</span> <span class="token function">getTweetArticle</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>property_meta<span class="token punctuation">.</span>name<span class="token punctuation">,</span> info<span class="token punctuation">.</span>authentication_id<span class="token punctuation">,</span> info<span class="token punctuation">.</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">            <span class="token keyword">const</span> postResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postTweet</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> tweet<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">            jsonObject<span class="token punctuation">[</span>info<span class="token punctuation">.</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"send"</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>sendListFilePath<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Create the contents of Tweet</span><br> */</span><br><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getTweetArticle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> authentication_id<span class="token punctuation">,</span> address</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">Welcome </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 🎉✨</span><br><span class="highlight-line">Patrons can now support </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>authentication_id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> by staking DEV on Stakes Social. </span><br><span class="highlight-line">Click the link below to get started 👍</span><br><span class="highlight-line">https://stakes.social/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span><br>    </span><span class="token template-punctuation string">`</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Create Twitter Client</span><br> */</span><br><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getClientTwitter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">customer_key<span class="token punctuation">,</span> customer_secret<span class="token punctuation">,</span> access_token_key<span class="token punctuation">,</span> access_token_secret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">twitter</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        consumer_key        <span class="token operator">:</span> customer_key<span class="token punctuation">,</span></span><br><span class="highlight-line">        consumer_secret     <span class="token operator">:</span> customer_secret<span class="token punctuation">,</span></span><br><span class="highlight-line">        access_token_key    <span class="token operator">:</span> access_token_key<span class="token punctuation">,</span></span><br><span class="highlight-line">        access_token_secret <span class="token operator">:</span> access_token_secret</span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Tweet with Twitter Client</span><br> */</span><br><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">postTweet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        client<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span></span><br><span class="highlight-line">            <span class="token string">'statuses/update'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token punctuation">{</span></span><br><span class="highlight-line">                status<span class="token operator">:</span> text</span><br><span class="highlight-line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> tweet<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span></span><br><span class="highlight-line">            <span class="token punctuation">{</span></span><br><span class="highlight-line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                    <span class="token function">resolve</span><span class="token punctuation">(</span>tweet<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">                <span class="token punctuation">}</span></span><br><span class="highlight-line">            <span class="token punctuation">}</span></span><br><span class="highlight-line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Acquire an OSS list approved by Data Viewer</span><br> */</span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getAllAuthenticationProperties</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span></span><br><span class="highlight-line">        <span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">{</span></span><br><span class="highlight-line">            method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">                <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">                <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>                query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_authentication(limit: 3, order_by: {block_number: desc}) {</span><br><span class="highlight-line">                        authentication_id</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                        property_meta {</span><br><span class="highlight-line">                            name</span><br><span class="highlight-line">                        }</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_authentication<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// Execute main function</span></span><br><span class="highlight-line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The program can be executed with this:</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">$ node index.mjs</span></code></pre>
<p>This is actually tweeted from BOT</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Welcome vasa-develop/cross-asset-swap 🎉✨<br>Patrons can now support vasa-develop/cross-asset-swap by staking DEV on Stakes Social. <br>Click the link below to get started 👍<a href="[https://t.co/mwgRebCkdg](https://t.co/mwgRebCkdg)">[https://t.co/mwgRebCkdg](https://t.co/mwgRebCkdg)</a></p>— Dev Protocol (@devprtcl) <a href="[https://twitter.com/devprtcl/status/1374586243548205056?ref_src=twsrc^tfw](https://twitter.com/devprtcl/status/1374586243548205056?ref_src=twsrc%5Etfw)">March 24, 2021</a></blockquote> <script async src="[https://platform.twitter.com/widgets.js](https://platform.twitter.com/widgets.js)" charset="utf-8"></script>
<h2>Setting up Crontab for regular execution</h2>
<p>You can complete the whole process after you’ve uploaded the above program to execution environment like servers and set up crontab.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">*/15 * * * * /home/foo/.nvm/versions/node/v14.15.4/bin/node /home/foo/index.mjs</span></code></pre>
<h2>Conclusion</h2>
<p>How was it? You can acquire asset information, which you possess at Dev Protocol, by utilizing Data Viewer. Other than assets, you can also get information such as account, market and policy. Next time, we’ll introduce easy Dapps that incorporate such information to you.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Deep Dive Khaos</title>
    <link href="https://initto.devprotocol.xyz/posts/deep-dive-khaos/"/>
    <updated>2021-03-20T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/deep-dive-khaos/</id>
    <content type="html"><![CDATA[
      <h1>Khaos</h1>
<p>Hi, I'm aggre.</p>
<p>In this article, you'll get an idea about Khaos, which is developed as a side project for Dev Protocol.</p>
<p>Khaos brings information, which doesn't exist on blockchain, into blockchain from the outside of blockchain, and has a function of an &quot;oracle&quot;. It is sometimes called Khaos Oracle.</p>
<h1>Necessity of Oracle</h1>
<p>We see various types of oracles as well as Khaos on Ethereum. Ethereum is a huge state holding a chain of state transitions based on defined protocols by smart contracts. That means if certain data doesn’t have any input transactions, it can’t exist on Ethereum. If you want to gain data source to be input from HTTP, you have to input HTTP response manually or let reliable bots automatically input it. Oracles are used for the latter case. Let’s say you’ve made a &quot;blockchain game in which winners are those who could accurately predict tomorrow's temperature in Tokyo.&quot; In this case, you need &quot;temperature data in Tokyo.&quot; Which do you think is more reliable: A) Alice, a temperature-freak girl, who inputs the data manually, or B) A smart contract that is programmed to let a bot input data obtained from the database of the Japan Meteorological Agency? Oracles are a must-have technology if you want to choose B.</p>
<h1>Necessity of Khaos</h1>
<p>For a general implementation of oracles, you start by emitting events from smart contracts. Subsequently, a server/node composing oracle protocols detects the events, and finally, the oracle calls up callback functions. By adding information that smart contracts require (such as &quot;temperature&quot; in &quot;Tokyo&quot;) into payloads of events to emit, oracle protocols get to know what the smart contract needs.</p>
<p>Khaos is an oracle that enables you to conceal payloads for oracle requests. If you need to obtain the information to oraclize based on a secret token, you need to detoxify such a token by turning its format into a public one.</p>
<p>With Khaos, you can oraclize your requests depending on your secret token on the public blockchain while concealing your secret token.</p>
<h1>Use Khaos</h1>
<p>You can use Khaos for your Dapps. If you use SDK for frontends and Starter Kit to implement oracle functions, you can start its development.</p>
<p><em>Currently, smart contracts, which can be used for Khaos, are limited to smart contracts composing the core of Dev Protocol or to Market, Policy contracts. In the future, Khaos can be used for all smart contracts.</em></p>
<h2>Oracle flow of Khaos</h2>
<p>Learning about Khaos' oracle flow is a great start for developing Khaos. It comprises several components such as Khaos Core, Khaos Functions, Khaos Registry, etc. The most important thing for developers is the following flow:</p>
<ol>
<li>Call Sign API (RESTful API) of Khaos, and obtain Public Signature after converting data subject to concealment into public.</li>
<li>Emit events from smart contracts. At this point, by including Public Signature in event payloads, you can deal with your concealed information for the oracle functions that you defined.</li>
<li>Khaos calls callback functions that you defined and closes its flow.</li>
</ol>
<p>Khaos provides oracles with high flexibility as it entrusts a number of interfaces to users. In order to achieve this, users need to implement various interfaces by themselves. However, you can quickly start your development by using Khaos Starter Kit.</p>
<h2>Public Signature</h2>
<p>One of the most significant keywords to handle Khaos is Public Signature.</p>
<p>Public Signature is a string encrypted by Json Web Tokens. Information used for encryption is open, so all of us can generate and decrypt it. In other words, secret information is not included in Public Signature at all, and it can be open to public. With Khaos, you can save your secret information with Public Signature as a key, and make use of it only inside Khaos instance.</p>
<p>Public Signature is the same as encrypted &quot;the following JSON string&quot; by &quot;sender's Ethereum account address.&quot;</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token property">"i"</span><span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token property">"m"</span><span class="token operator">:</span> <span class="token string">"..."</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can check the implementation and the tests of it at Khaos Core. <a href="https://github.com/dev-protocol/khaos-core/tree/main/src/sign/publicSignature" target="_blank" rel="noopener">khaos-core/src/sign/publicSignature at main · dev-protocol/khaos-core (github.com)</a></p>
<h2>Khaos Starter Kit</h2>
<p><a href="https://github.com/dev-protocol/khaos-starter-kit" target="_blank" rel="noopener">dev-protocol/khaos-starter-kit: 🌌Start developing Khaos Functions now (github.com)</a></p>
<p>We provide templates for users' interfaces to define.</p>
<p>After you fork and clone this repository, you can start development at your local environment. The package management of Khaos Starter Kit is done by yarn, so you have to <a href="https://classic.yarnpkg.com/en/docs/install/" target="_blank" rel="noopener">install yarn</a> in advance.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">$ git clone git@github.com:YOUR/khaos-starter-kit.git</span><br><span class="highlight-line">$ cd khaos-starter-kit</span><br><span class="highlight-line">$ yarn</span></code></pre>
<p>In src directory, templates for interfaces and tests that you need to define are written in TypeScript.</p>
<p>For Khaos Starter Kit, we recommend <a href="https://www.npmjs.com/package/eslint-plugin-functional" target="_blank" rel="noopener">eslint-plugin-functional</a>, an ESLint plugin for your security. Though you can change its setting freely, we suggest that you should use it without changing its setting.</p>
<h3>abi.ts</h3>
<p>You can define and export <code>abi</code> as the ABI of your smart contract as array written in <a href="https://docs.ethers.io/v5/api/utils/abi/formats/#abi-formats--human-readable-abi">Human-Readable ABI Format</a> on this file.</p>
<p>In the case of an event like <code>Query</code> and of smart contracts possessing callback functions that <code>callback</code>, you can write as stated below. Only event and callback functions are used for Khaos. Therefore there is no need to define everything if although other interfaces are present in the smart contract.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Abi<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> abi<span class="token operator">:</span> Abi <span class="token operator">=</span> <span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token string">'event Query(string calldata fooId, string calldata publicSignature, address account, bytes32 queryId)'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token string">'function callback(bytes32 queryId, bool result) external;'</span></span><br><span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<h3>addresses.ts</h3>
<p>You can define and export <code>addresses</code> as the addresses of your smart contracts where emit oracle requests as the function that returns <code>Promise&lt;string | undefined&gt;</code>. The return value of this function is also used for addresses of callback functions.</p>
<p>The function receives the following object as the argument.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> network<span class="token operator">:</span> <span class="token string">'mainnet'</span> <span class="token operator">|</span> <span class="token string">'ropsten'</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can switch the addresses by the mainnet of Ethereum, or by Ropsten testnet.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>FunctionAddresses<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> addresses<span class="token operator">:</span> <span class="token function-variable function">FunctionAddresses</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>network<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span></span><br><span class="highlight-line">  network <span class="token operator">===</span> <span class="token string">'mainnet'</span></span><br><span class="highlight-line">    <span class="token operator">?</span> <span class="token string">'0x1510EA12a30E5c40b406660871b335feA32f29A'</span></span><br><span class="highlight-line">    <span class="token operator">:</span> <span class="token string">'0x609Fe85Dbb9487d55B5eF50451e20ba2Edc8F4B7'</span></span></code></pre>
<h3>authorize.ts</h3>
<p>You can define and export <code>authorize</code> as your authentication method to be called when Sign API of Khaos is called, on this file. The function should returns <code>Promise&lt;boolean | undefined&gt;</code>.</p>
<p>Only in the case where the result of authorize is <code>true</code>, Public Signature is generated and secret information encrypted in Khaos server is saved.</p>
<p>Functions receive the following object as the argument. <code>message</code> is a string subject to verify. Twitter ID and GitHub repository names are examples that correspond to it. <code>secret</code> is information for secret. Since <code>request</code> is HttpRequest Type of @azure/functions, various contexts can be used when Sign API is called.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> message<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> secret<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> request<span class="token operator">:</span> HttpRequest</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>Because bent is installed as HTTP library for Khaos Starter Kit, you can validate whether the <code>message</code> is justifiable or not by calling an external API. In addition, ramda is also installed as a functional programing library, so you can use it case by case.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> bent <span class="token keyword">from</span> <span class="token string">'bent'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>always<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'ramda'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>FunctionAuthorizer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> fetcher <span class="token operator">=</span> <span class="token function">bent</span><span class="token punctuation">(</span><span class="token string">'https://api.foo.bar'</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> authorize<span class="token operator">:</span> <span class="token function-variable function">FunctionAuthorizer</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">  message<span class="token operator">:</span> user_id<span class="token punctuation">,</span></span><br><span class="highlight-line">  secret<span class="token punctuation">,</span></span><br><span class="highlight-line">  request</span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span><br><span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span>headers<span class="token punctuation">}</span> <span class="token operator">=</span> request</span><br><span class="highlight-line">  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">fetcher</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>verified<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">}</span><span class="token operator">></span></span></span><span class="token punctuation">(</span></span><br><span class="highlight-line">    <span class="token string">'/verify'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      user_id</span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">      Authorization<span class="token operator">:</span> authorization<span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">'User-Agent'</span><span class="token operator">:</span> headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> results<span class="token operator">?.</span>verified</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>event.ts</h3>
<p>You can define and export <code>event</code> as the function, which returns the event name of your smart contract on this file. The function returns <code>Promise&lt;string | undefined&gt;</code>.</p>
<p>The function receives the following object as the argument.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> network<span class="token operator">:</span> <span class="token string">'mainnet'</span> <span class="token operator">|</span> <span class="token string">'ropsten'</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>You can switch event names by the mainnet of Ethereum or by Ropsten testnet, though we think you would continue to use the same event names in many cases.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>FunctionEvent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>always<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'ramda'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> event<span class="token operator">:</span> FunctionEvent <span class="token operator">=</span> <span class="token function">always</span><span class="token punctuation">(</span><span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'Query'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></code></pre>
<h3>oraclize.ts</h3>
<p>You can define and export <code>oraclize</code> as the function called by oracle request from smart contracts, on this file. This function plays a vital role. After the return value of this function is formatted by <code>pack</code> function as stated below, it is transferred to blockchain through callbacks for smart contracts. The time when oraclize function is called is after events are detected and secret information is obtained through Public Signature as a key.</p>
<p>The function receives the following object as the argument, as stated below. <code>signatureOptions</code> is decrypted data of Public Signature. Only in the case where generated Public Signature is included in event payloads when the result of the <code>authorize</code> function returns <code>true</code>, <code>signatureOptions</code> is defined. In other words, if unauthorized Public Signature is included, <code>undefined</code> is given back. <code>query.publicSignature</code> includes event payloads with Public Signature. <code>query.transactionhash</code> includes transaction-hash that emitted the event. <code>query.allData</code> includes all event payloads.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> signatureOptions<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> message<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> address<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> query<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> publicSignature<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> allData<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> transactionhash<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> network<span class="token operator">:</span> <span class="token string">'mainnet'</span> <span class="token operator">|</span> <span class="token string">'ropsten'</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The return value of the function is Promise that is solved by the following object.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  message<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  status<span class="token operator">:</span> <span class="token builtin">number</span></span><br><span class="highlight-line">  statusMessage<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The function verifies that the signer of Public Signature and the oracle request sender is the same account in the next example.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>FunctionOraclizer<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> oraclize<span class="token operator">:</span> <span class="token function-variable function">FunctionOraclizer</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>signatureOptions<span class="token punctuation">,</span> query<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span>queryId<span class="token punctuation">,</span> fooId<span class="token punctuation">,</span> account<span class="token punctuation">}</span> <span class="token operator">=</span> query<span class="token punctuation">.</span>allData</span><br><span class="highlight-line">  <span class="token keyword">const</span> isSameId <span class="token operator">=</span> fooId <span class="token operator">===</span> signatureOptions<span class="token operator">?.</span>message</span><br><span class="highlight-line">  <span class="token keyword">const</span> isSameUser <span class="token operator">=</span> account <span class="token operator">===</span> signatureOptions<span class="token operator">?.</span>address</span><br><span class="highlight-line">  <span class="token keyword">return</span> isSameId <span class="token operator">&amp;&amp;</span> isSameUser</span><br><span class="highlight-line">    <span class="token operator">?</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message<span class="token operator">:</span> queryId<span class="token punctuation">,</span></span><br><span class="highlight-line">        status<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        statusMessage<span class="token operator">:</span> <span class="token string">'success'</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        message<span class="token operator">:</span> queryId<span class="token punctuation">,</span></span><br><span class="highlight-line">        status<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        statusMessage<span class="token operator">:</span> <span class="token string">'fail'</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>pack.ts</h3>
<p>You can define and export <code>pack</code> as the function that returns the callback function name and your smart contract's arguments on this file.</p>
<p>The function receives the following object as the argument, as stated below. <code>results</code> have the same data as the value gained when Promise, which is returned by oraclize, resolves.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">type</span> <span class="token class-name">Options</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">readonly</span> results<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> message<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> status<span class="token operator">:</span> <span class="token builtin">number</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> statusMessage<span class="token operator">:</span> <span class="token builtin">string</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>In the next example, function named <code>callback</code> are designated to callback by arguments of <code>[results.message, results.status, results.statusMessage]</code>.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>FunctionPack<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> pack<span class="token operator">:</span> <span class="token function-variable function">FunctionPack</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>results<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    name<span class="token operator">:</span> <span class="token string">'callback'</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    args<span class="token operator">:</span> <span class="token punctuation">[</span>results<span class="token punctuation">.</span>message<span class="token punctuation">,</span> results<span class="token punctuation">.</span>status<span class="token punctuation">,</span> results<span class="token punctuation">.</span>statusMessage<span class="token punctuation">]</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h2>Test</h2>
<p>Khaos Starter Kit writing tests by ava as default. You can freely change your testing framework depending on your projects.</p>
<p>Use of Khaos is not essential for the test, however, we strongly suggest that you should prepare as much accurate test case as possible for guaranteeing the specifications and maintainability.</p>
<h2>Deploy</h2>
<p>After all of your interfaces and tests are ready, you move on to deploy codes.</p>
<p>In Khaos, you need to bundle the functions defined by you into one file of <code>index.js</code>, and deploy to IPFS. With Khaos Starter Kit, you can bundle codes using Rollup as the default bundler and deploy to IPFS nodes on Infura.</p>
<p>This is the only command that you should execute.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">yarn deploy</span></code></pre>
<p>For some source codes, you need to update Rollup's setting and install additional Rollup plugins. In such cases, you can rewrite <code>rollup.config.js</code>, and install additional Rollup plugins. You can also utilize bundlers except for Rollup.</p>
<p>When you deploy, you can get the following standard output, so you should take a memo of the value of <code>IPFS_HASH_FOR_DIRECTORY</code>.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">> {"Name":"index.js","Hash":"IPFS_HASH_FOR_FILE","Size":"554"}</span><br><span class="highlight-line">> {"Name":"","Hash":"IPFS_HASH_FOR_DIRECTORY","Size":"609"}</span></code></pre>
<h2>Khaos Registry</h2>
<p><a href="https://github.com/dev-protocol/khaos-registry" target="_blank" rel="noopener">dev-protocol/khaos-registry: 🌌Khaos Registry for functions ipfs hash (github.com)</a></p>
<p>Address maps for deployed functions in IPFS are managed.</p>
<p>Fork this repository, and additionally write the value of <code>IPFS_HASH_FOR_DIRECTORY</code>, which you've just taken a note of, for map/functions.json.</p>
<pre class="language-json"><code class="language-json"><span class="highlight-line"><span class="token punctuation">[</span></span><br><span class="highlight-line">  <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"foo-bar"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token property">"ipfs"</span><span class="token operator">:</span> <span class="token string">"&lt;IPFS_HASH_FOR_DIRECTORY>"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>After you've pushed the changes for the forked repository, create Pull Request for the source repository.</p>
<p>The usage application of Khaos is limited to Dev Protocol related contracts currently. Hence, the team verifies whether <code>addresses</code> of deployed functions in IPFS are contracts on Dev Protocol or not.</p>
<p><em>In the future, Khaos Registry would be re-composited and decentralized as smart contracts.</em></p>
<h2>Khaos Kit</h2>
<p><a href="https://github.com/dev-protocol/khaos-kit-js" target="_blank" rel="noopener">dev-protocol/khaos-kit-js: 🌌Khaos Kit for JavaScript (github.com)</a></p>
<p>Khaos Kit provides API to interact with Khaos from JavaScript(TypeScript).</p>
<h3>sign</h3>
<p><code>sign</code> API is a shorthand for HTTP requests that call Sign API of Khaos.</p>
<p>This function takes two arguments. The first argument is Khaos authorization ID, which is the same string designated at <code>id</code> property in Khaos Registry. The second one takes <code>'mainet'</code> or <code>'ropsten'</code> as a network name.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token comment">// createPublicSignature.ts</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>sign<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-kit'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> createPublicSignature <span class="token operator">=</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token string">'foo-bar'</span><span class="token punctuation">,</span> <span class="token string">'mainnet'</span><span class="token punctuation">)</span></span></code></pre>
<p><code>sign</code> returns a function to take <code>KhaosSignOptions</code> as the argument. <code>message</code> of <code>KhaosSignOptions</code> is the message used for the signature. <code>signature</code> is the signature created in the user's Ethereum wallet. <code>secret</code> is information that your Dapps want to conceal.</p>
<p>To write a signature with the user's Ethereum wallet, you have to use API for Web3 or Ethers, etc.</p>
<ul>
<li>Web3: <a href="https://web3js.readthedocs.io/en/v1.2.0/web3-eth-personal.html#sign">web3.eth.personal — web3.js 1.0.0 documentation (web3js.readthedocs.io)</a></li>
<li>Ethers: <a href="https://docs.ethers.io/v5/api/signer/#Signer-signMessage">Signers (ethers.io)</a></li>
</ul>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>KhaosSignOptions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-kit'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>createPublicSignature<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./createPublicSignature'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">getPublicSignature</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>message<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> secret<span class="token punctuation">}</span><span class="token operator">:</span> KhaosSignOptions<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createPublicSignature</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    message<span class="token punctuation">,</span></span><br><span class="highlight-line">    signature<span class="token punctuation">,</span></span><br><span class="highlight-line">    secret</span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token comment">// {publicSignature: 'eyJ...', address: '0x...'}</span></span><br><span class="highlight-line">  <span class="token keyword">return</span> results<span class="token punctuation">.</span>publicSignature</span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>emulate</h3>
<p><code>emulate</code> API emulates the result of emitted events for oracle requests with off-chain.</p>
<p>This function takes two arguments. The first argument is Khaos authorization ID, which is the same string designated at <code>id</code> property in Khaos Registry. The second one takes <code>'mainet'</code> or <code>'ropsten'</code> as a network name.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token comment">// emulator.ts</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>emulate<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-kit'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> emulator <span class="token operator">=</span> <span class="token function">emulate</span><span class="token punctuation">(</span><span class="token string">'foo-bar'</span><span class="token punctuation">,</span> <span class="token string">'mainnet'</span><span class="token punctuation">)</span></span></code></pre>
<p><code>emulate</code> returns a function to take <code>KhaosEmulateOptions</code> as the argument. <code>KhaosEmulateOptions</code> takes <code>event</code> object that changed the all same information as <a href="https://github.com/ethers-io/ethers.js/blob/6c43e20e7a68f3f5a141c74527ec63d9fe8458be/packages/contracts/src.ts/index.ts#L60"><code>Event</code> of @ethersproject/contracts</a> into optional. <code>Event.arg</code> is extend type of <code>Array</code> by <code>{readonly [key: string]: any}</code>, but <code>KhaosEmulateOptions.args</code> is simplified by overridden at <code>Record&lt;string, string | number | undefined | null&gt;</code>.</p>
<p>This function's return value is based on additional data called <code>expectedTransaction</code> and the return value of <code>pack</code>, which you created with Khaos Starter Kit.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>KhaosEmulateOptions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@devprotocol/khaos-kit'</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>emulator<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./emulator'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> <span class="token function-variable function">predictCallbackStatus</span> <span class="token operator">=</span>  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>args<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span> KhaosSignOptions<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> results<span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">emulator</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    args<span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span></span><br>    <span class="token comment">/**<br><span class="highlight-line">     * {</span><br><span class="highlight-line">     *     data: {</span><br><span class="highlight-line">     *         name: 'callback',</span><br><span class="highlight-line">     *         args: ['0x...', 200, 'success'],</span><br><span class="highlight-line">     *         expectedTransaction: {</span><br><span class="highlight-line">     *             gasLimit: '122004',</span><br><span class="highlight-line">     *             success: true</span><br><span class="highlight-line">     *         }</span><br><span class="highlight-line">     *     }</span><br><span class="highlight-line">     * }</span><br>     */</span><br><span class="highlight-line">    <span class="token keyword">return</span> results<span class="token punctuation">.</span>data<span class="token operator">?.</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Introducing the TORUS Wallet</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-torus-wallet/"/>
    <updated>2021-03-19T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-torus-wallet/</id>
    <content type="html"><![CDATA[
      <h1>Introducing Torus Wallet</h1>
<p><img src="/images/posts/what-is-torus-wallet/pic01.png" alt="TORUS Wallet"></p>
<h2>What is a Crypto Wallet?</h2>
<p>A cryptocurrency wallet can store a user’s entire cryptocurrency portfolio. Wallets leverage private and public keys to protect the stored cryptocurrency. Popular cryptocurrency wallets are Metamask, Ledger, and Torus wallet which all support ERC token standards.</p>
<h2>What is Torus Wallet?</h2>
<p>Torus Wallet is an Ethereum based wallet that uses web technology.<br>
Many wallets have extensive steps that can propose a barrier to entry for new users. Managing a private key and fiat to crypto onramps can become overwhelming for new users. However, since Torus Wallet leverages common SNS logins there are relatively fewer steps thereby making it easier to get started with your Web3 experience.</p>
<h2>Torus Wallet’s Supported Logins</h2>
<p>Torus Wallet users can now get an Ethereum based wallet by logging in with one of the SNS logins supported by Torus. Users can easily send crypto payments to any user by having their username on one of these platforms. For example, you can now send Ethereum payments to your friend by inputting their Twitter handle.</p>
<h2>Supported Torus Logins:</h2>
<ul>
<li>Google</li>
<li>Facebook</li>
<li>AppleID</li>
<li>Twitter</li>
<li>Line</li>
<li>Github</li>
<li>LinkedIn</li>
<li>Reddit</li>
<li>Twitch</li>
<li>Discord</li>
<li>WeChat</li>
<li>Kakao</li>
</ul>
<h2>What you can do with Torus Wallet?</h2>
<p>Torus Wallet can</p>
<ul>
<li>Store ERC-20 tokens</li>
<li>Deposit and withdraw ERC-20 tokens</li>
<li>Buy ERC-20 tokens（ETH、DAI、USDC、USDT）</li>
<li>Store NFTs</li>
</ul>
<h2>How to get a Torus Wallet?</h2>
<p>Getting a Torus Wallet is very easy</p>
<ol>
<li>Go to <a href="https://app.tor.us/" target="_blank" rel="noopener">https://app.tor.us/</a></li>
<li>Click “Try it now”</li>
<li>Login with your preferred SNS login</li>
</ol>
<p>It’s that simple.</p>
<p><img src="/images/posts/what-is-torus-wallet/pic02_en.png" alt="How to"></p>
<h2>Summary</h2>
<p>Torus Wallet is a valuable solution as it solves some of blockchain’s main UI/UX barriers by allowing users to get a blockchain wallet by logging in with platforms we all use.  Additionally, Torus users can send money to friends by just having their email, Github username, Twitter handle, and more. We recommend Torus for novice blockchain users who want to easily manage their wallets.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Tokenization changes OSS development</title>
    <link href="https://initto.devprotocol.xyz/posts/tokenization-changes-oss-development/"/>
    <updated>2021-03-17T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/tokenization-changes-oss-development/</id>
    <content type="html"><![CDATA[
      <p>This article is a revised version of Dev Protocol’s Medium article, <a href="https://medium.com/devprtcl/the-tokenization-of-open-source-10ee0ea90607" target="_blank" rel="noopener">“The Tokenization of Open Source”</a>, for Japanese readers. (And this is the English version of it.)</p>
<p>The idea that Opensource Software cannot be a business model is an ancient myth.<br>
According to a survey made by <a href="https://oss.capital" target="_blank" rel="noopener">OSS Capital</a>, a VC specializing in COSS (commercial OSS), the market size has already expanded to around 10 trillion yen in the COSS world.</p>
<ul>
<li>$17.5 billion revenue</li>
<li>$138.7 billion market value (7x revenue multiples)</li>
<li>$67.24 billion in exits</li>
<li>50 thousand employees</li>
</ul>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">COSS business models: 1) Open Core and 2) Support Subscription.<br><br>My Thesis: We’re likely to see Tokenized Opensource Software Companies (TOSS) as the 3rd model when they can leverage:<br><br>- COSS models for monetization<br>- Network efforts (driven by incentive distribution)</p>&mdash; Greg Osuri (@gregosuri) <a href="https://twitter.com/gregosuri/status/1161017263551479808?ref_src=twsrc%5Etfw">August 12, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>This company index of COSS referred to in this tweet was created in 2013. TOSS is a new model in which you can leverage its growth.</p>
<h2>Benefits of Tokenization</h2>
<p>“T” in TOSS stands for “Tokenized”.<br>
TOSS (Tokenized Opensource Software) is the latest type of OSS using blockchain.</p>
<p>Let us talk about blockchain briefly.<br>
One of the core functions of blockchain is that you can tokenize everything. You can unlock items’ value and easily transfer them by tokenization. It matches you with third party’s incentives and acts as a bridge with different communities.</p>
<p>We mean, eligible tokens themselves have a potential to build a sustainable and efficient economic model. Currently, tokenization of various assets such as art, real estate and tesla stock is increasing. In OSS world, there is also an growing need for tokenization.</p>
<p>Today, Dev Protocol is the only option that realizes TOSS.</p>
<h2>TOSS for the next generation</h2>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A new way to fund open source?<br><br>- Be open source dev<br>- Issue a token<br>- Hold X% of it<br>- Has 0 value initially<br>- Award (100-X)% of it over time to folks who contribute code<br>- Companies then buy token to prioritize bugs &amp; features<br>- Suddenly, an economy arises!</p>&mdash; balajis.com (@balajis) <a href="https://twitter.com/balajis/status/1326313315044192256?ref_src=twsrc%5Etfw">November 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Dev Protocol brings about numerous benefits for all Github users by easy tokenization of OSS. It shares incentives with all community members involved, and leads to the growth of community-driven network.</p>
<h2>TOSS of Dev Protocol</h2>
<h3>Introduction</h3>
<p>TOSS created through Dev Protocol <strong>proves ownership of the OSS and can be shared with everyone involved in the project</strong>. Owners can freely set up who to share and how much to distribute, such as maintainers and contributors.</p>
<p>Holders of TOSS can utilize the following various use case.</p>
<h3>1. Grant farming</h3>
<p>The biggest feature of Dev Protocol’s TOSS is a sustainable incentive model instead of donation.<br>
By using Dev Protocol's sponsorship platform <a href="https://stakes.social" target="_blank" rel="noopener">Stakes.social</a>, OSS developers can get sponsors and monetize their OSS.<br>
“Yield farming” is a method where you get profits by obtaining interest and commission income through the loan of money to DeFi(Decentralized Finance) service. The feature of Dev Protocol is an altruistic yield farming. OSS sponsors can grant DEV for OSS, while increasing the number of DEV for themselves. Since OSS sponsors can increase their money during their support for the growth of OSS projects, they can realize more sustainable fundraising for OSS ecosystem.<br>
For more details: <a href="https://initto.devprotocol.xyz/posts/dev-protocol-rather-than-donation-service/" target="_blank" rel="noopener">Dev Protocol rather than donation service</a></p>
<h3>2. Automatic distribution of reward</h3>
<p>DEV token for creator reward is automatically distributed in accordance with the ownership rate of TOSS.<br>
Owners of OSS can freely set up the amount to distribute as well as designate people, including development team and contributors, to share TOSS. TOSS can be calculated to 18 places of decimals. All the team members involved in the project can receive DEV token.</p>
<p>example) If a year cumulative total of the creator reward for an OSS project is 1000 DEV,</p>
<ul>
<li>Reward for an owner holding 50% of TOSS: 500 DEV per year</li>
<li>Reward for contributor A holding 30% of TOSS: 300 DEV per year</li>
<li>Reward for contributor B holding 20% of TOSS: 200 DEV per year</li>
</ul>
<p>*This is one of the examples. Owners of OSS can freely set up the amount to distribute and people to share TOSS. It is also possible for only the owner to have it without sharing.<br>
*Holders of TOSS can withdraw DEV at any time.</p>
<h3>3. Commit farming</h3>
<p>With commit farming, you will be able to distribute a part of TOSS to contributors every 1 commit in GitHub. By holding a part of TOSS, contributors can receive the distribution of creator reward as a member of the project.<br>
The same incentive model like this is adopted by EEA Trusted Reward Token (Github), which gives reward to firms that have completed achievements and tasks designated by EEA (Enterprise Ethereum Alliance) board.</p>
<h3>4. Governance</h3>
<p>The governance model of OSS is vital when we manage projects. Dev Protocol is seeking a governance function  which should be built on TOSS. If holders of TOSS can vote for the project policy, it is highly valuable for stakeholders including companies that rely on OSS, which could result in the increase of demand for TOSS.<br>
Please let us know your opinion at <a href="https://github.com/dev-protocol/DIPs/issues" target="_blank" rel="noopener">DIP</a>.</p>
<h3>5. Sponsor Perks</h3>
<p>You can add incentives to increase an opportunity to be sponsored by giving sponsors perks that can be obtained only by sponsors such as the support of OSS and closed contents.</p>
<h3>6. Liquidity mining</h3>
<p>Liquidity of token is important in terms of the enhancement of token’s value. You can give liquidity mining as a reward for mining token to provide liquidity with participants. You can introduce liquidity mining of TOSS for OSS projects, and add incentives to increase an opportunity to be sponsored.</p>
<h3>7. OSS ETF</h3>
<p>At the time of issuing TOSS, Dev Protocol can become ETF that is subject to OSS when <a href="https://initto.devprotocol.xyz/ja/posts/what-is-treasury/" target="_blank" rel="noopener">Dev Protocol Treasury</a> receives a part of issued TOSS.<br>
Dev Protocol Treasury will eventually be administrated by DAO and it holds portfolio of TOSS. Then, if creators validate the governance of TOSS, Dev Protocol Treasury acquires a right to receive DEV from creator reward as well as vote right. Holders of DEV vote for the way of distribution (including burning) of creator reward, and get a right to vote for OSS. Implementation of this process encourages DEV to obtain certain percentages of protocol’s value and to become a metagovernance tool.</p>
<h3>8. Limitless possibilities of use case</h3>
<p>As Dev Protocol is open as OSS, everyone can develop Dapps using Dev Protocol, which makes it possible to design the use case of TOSS. Because it’s decentralized, TOSS of OSS projects, which have already joined Dev Protocol, can also participate in your Dapp from the beginning.</p>
<p>Have you got any ideas for use cases or Dapps that you want to develop?<br>
Read the document, and start developing.<br>
<a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">📗GitBook</a><br>
<a href="https://initto.devprotocol.xyz/posts/20210226/" target="_blank" rel="noopener">👩‍🍳How to create Dev Protocol Dapp 1,2,3</a></p>
<h2>Interested in TOSS creation?</h2>
<p>Thank you for reading this article.<br>
I hope this gives you an idea of the future that Dev Protocol team are trying to change.</p>
<p>If you use <a href="https://stakes.social" target="_blank" rel="noopener">Stakes.social</a>, an application for Dev Protocol, you can easily create TOSS for your GitHub repository. Application for the tokenization of Stakes.social is now invitation-request only.</p>
<p>You can apply for your request here: (It takes about 30 seconds.)<br>
<a href="https://stakes.social/invite/github" target="_blank" rel="noopener">https://stakes.social/invite/github</a></p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (3/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210312/"/>
    <updated>2021-03-12T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210312/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
This is the third article. If you haven't seen it before, it's a good idea to go back and move on.</p>
<ul>
<li><a href="https://initto.devprotocol.xyz/posts/20210226/" target="_blank" rel="noopener">1st</a></li>
<li><a href="https://initto.devprotocol.xyz/posts/20210302/" target="_blank" rel="noopener">2nd</a></li>
</ul>
<p>This time I would like to make a connection with my wallet and the process of staking to tokens.</p>
<ul>
<li>STEP01: <a href="#heading-step01:-prepare-the-development-environment">Prepare the development environment</a></li>
<li>STEP02: <a href="#heading-step02:-login-to-metamask">Login to MetaMask</a></li>
<li>STEP03: <a href="#heading-step03:-preparing-to-stake">Preparing to stake</a></li>
<li>STEP04: <a href="#heading-step04:-create-a-staking-process">Create a staking process</a></li>
</ul>
<h2>STEP01: Prepare the development environment</h2>
<p>We will continue to use the development environment that was created last time.<br>
This time we will handle Ethereum with a window object, so let's create a type file for it. It also uses the HttpProvider type, so install it.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npm install web3-core</span></code></pre>
<p>Save the code below as <code>src/types/window.d.ts</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'web3-core'</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestArguments</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> method<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token keyword">readonly</span> params<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> object</span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Ethereum</span> <span class="token keyword">extends</span> <span class="token class-name">HttpProvider</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token function-variable function">request</span><span class="token operator">:</span> <span class="token punctuation">(</span>args<span class="token operator">:</span> RequestArguments<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">></span></span><br><span class="highlight-line">    isMetaMask<span class="token operator">:</span> <span class="token builtin">boolean</span></span><br><span class="highlight-line">    chainId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">declare</span> global <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        ethereum<span class="token operator">?</span><span class="token operator">:</span> Ethereum</span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p><code>window.ethereum</code> is an extension that is inserted when you add MetaMask to your browser.<br>
The above type declares only the one used in this Dapp. If you want to know everything, you can check from the following<br>
<a href="https://eips.ethereum.org/EIPS/eip-1193" target="_blank" rel="noopener">https://eips.ethereum.org/EIPS/eip-1193</a></p>
<h2>About the page to be created this time</h2>
<p>This time, I would like to add a staking function to the detail page created last time.<br>
By pressing the button on the token, it will be stakes as 1DEV, 5DEV, 10DEV.<br>
<img src="/images/posts/20210312/pic01.png" alt="tokens page"></p>
<h2>STEP02: Login to MetaMask</h2>
<p>You need to connect to your wallet (MetaMask) to stake your DEV.</p>
<p>MetaMask is a wallet for Ethereum.<br>
Please install the Chrome version of MetaMask from <a href="https://metamask.io/download.html" target="_blank" rel="noopener">here</a></p>
<blockquote>
<p>This time I will use MetaMask, but there are various other wallets for Ethereum.<br>
<a href="https://ethereum.org/en/wallets/find-wallet/" target="_blank" rel="noopener">Find Ethereum Wallets</a></p>
</blockquote>
<p>You need a wallet address to stake.You must be logged in to MetaMask to get your wallet address<br>
I have prepared a sample code for that.<br>
Save the code below as <code>src/assets/ts/wallets.ts</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">/**<br><span class="highlight-line"> * Login process when the LOGIN button is pressed</span><br><span class="highlight-line"> * If you can get the address from MetaMask, you can login.</span><br> */</span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">clickLoginButton</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMetamask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please install MetaMask"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">await</span> <span class="token function">connectMetaMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please allow connection with MetaMask"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">await</span> <span class="token function">isMetaMaskLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please login from MetaMask"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMainNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Please switch to the main net"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You are logged in to MetaMask"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token function">loggedInStyle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Used when you want to judge the login status at the time of initial display</span><br> */</span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> isLogin <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMetamask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">await</span> <span class="token function">isMetaMaskLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMainNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Style change when login and non-login of login button</span><br><span class="highlight-line"> * @param button</span><br> */</span><br><span class="highlight-line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">loggedInStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span>button<span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    button<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"btn-outline-warning"</span><span class="token punctuation">,</span> <span class="token string">"btn-outline-success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    button<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"LOGGED IN"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Determine if MetaMask is connected to the main network</span><br> */</span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">isMainNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">.</span>chainId<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Determine if MetaMask is installed</span><br> */</span><br><span class="highlight-line"><span class="token keyword">function</span> <span class="token function">isMetamask</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span> window<span class="token punctuation">.</span>ethereum <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span> window<span class="token punctuation">.</span>ethereum<span class="token punctuation">.</span>isMetaMask<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Get the wallet address from MetaMask</span><br> */</span><br><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> accounts <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>ethereum<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'eth_accounts'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Determine if you are logged in</span><br> */</span><br><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">isMetaMaskLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span> <span class="token keyword">await</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="token comment">/**<br><span class="highlight-line"> * Connect with MetaMask</span><br> */</span><br><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">connectMetaMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">await</span> window<span class="token punctuation">.</span>ethereum<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">'eth_requestAccounts'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">4001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token keyword">return</span> <span class="token boolean">false</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> <span class="token boolean">true</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<blockquote>
<p>For more details on how to use MetaMask, please see <a href="https://docs.metamask.io/guide/" target="_blank" rel="noopener">here</a>.</p>
</blockquote>
<p>After writing the code, add the following code to <code>main.ts</code>.<br>
This is the code that gets the HTMLElement of the login button and calls the <code>clickLoginButton</code> created above when the login button is clicked.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Add Import to call the process at the beginning of the file</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>clickLoginButton<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./wallets"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token operator">...</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-tokens"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token comment">// Write below the if statement</span></span><br><span class="highlight-line">      <span class="token keyword">const</span> loginButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"login-button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      loginButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> clickLoginButton<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token operator">...</span></span></code></pre>
<h2>STEP03: Preparing to stake</h2>
<p>If you want to stake Dev, use the library <code>dev-kit</code> provided by Dev Protocol.</p>
<blockquote>
<p>dev-kit is a library that makes it easy to execute contracts provided by the Dev Protocol from the front end. Details can be found from <a href="https://github.com/dev-protocol/dev-kit-js#readme">here</a>.</p>
</blockquote>
<p>install dev-kit</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npm i -D @devprotocol/dev-kit</span></code></pre>
<p>Also, this time we need to connect to the Ethereum node, so install <a href="https://github.com/ChainSafe/web3.js" target="_blank" rel="noopener">web3.js</a> as well.</p>
<blockquote>
<p>For web3js, please refer to this <a href="https://web3js.readthedocs.io/en/v1.3.4/" target="_blank" rel="noopener">Documentation</a>.</p>
</blockquote>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npm install web3</span></code></pre>
<p>When staking with <code>dev-kit</code>, use as follows</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">"web3/dist/web3.min"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>addresses<span class="token punctuation">,</span> contractFactory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/dev-kit"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// create Client</span></span><br><span class="highlight-line"><span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> clientDev <span class="token operator">=</span> <span class="token function">contractFactory</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span>currentProvider<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// Get the DevProtocol address of the main network</span></span><br><span class="highlight-line"><span class="token keyword">const</span> registryContract <span class="token operator">=</span> clientDev<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span>addresses<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>main<span class="token punctuation">.</span>registry<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">await</span> registryContract<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// staking</span></span><br><span class="highlight-line">clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'property address'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'amount of DEV'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span></code></pre>
<h2>STEP04: Create a staking process</h2>
<p>Code so that staking is performed at the push of a button. Add the following to <code>main.ts</code></p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>clickLoginButton<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./wallets"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> Web3 <span class="token keyword">from</span> <span class="token string">"web3/dist/web3.min"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>addresses<span class="token punctuation">,</span> contractFactory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/dev-kit"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token operator">...</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-tokens"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token operator">...</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> tokensHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tokens"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> token <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getTokens</span><span class="token punctuation">(</span>creatorAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token operator">...</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get all buttons for all tokens</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> buttons <span class="token operator">=</span> tokensHTMLElement<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Add a click event to the button</span></span><br><span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> button <span class="token keyword">of</span> buttons<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span></span><br><span class="highlight-line">            <span class="token keyword">const</span> amount  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"amount"</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">            <span class="token keyword">await</span> <span class="token function">stakeDev</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> amount<span class="token punctuation">)</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The code from here can be added below the above code or written in another file and then imported.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">stakeDev</span> <span class="token punctuation">(</span>propertyAddress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> clientDev <span class="token operator">=</span> <span class="token function">contractFactory</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span>currentProvider<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> registryContract <span class="token operator">=</span> clientDev<span class="token punctuation">.</span><span class="token function">registry</span><span class="token punctuation">(</span>addresses<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>main<span class="token punctuation">.</span>registry<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">await</span> registryContract<span class="token punctuation">.</span><span class="token function">token</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> clientDev<span class="token punctuation">.</span><span class="token function">dev</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>propertyAddress<span class="token punctuation">,</span> amount<span class="token punctuation">)</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>After making the coding and minor modifications so far, pressing the button will launch MetaMask as shown below.</p>
<p><img src="/images/posts/20210312/pic02.png" alt="tokens page"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This completes the simple Dapp creation using the library provided by Dev Protocol Dev Protocol.<br>
The various libraries also have various functions not introduced this time.<br>
I would like to introduce those functions as well, so please look forward to it.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol rather than donation service</title>
    <link href="https://initto.devprotocol.xyz/posts/dev-protocol-rather-than-donation-service/"/>
    <updated>2021-03-11T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/dev-protocol-rather-than-donation-service/</id>
    <content type="html"><![CDATA[
      <p>Hi, this is Dev Protocol Team.<br>
We’ve continued the development of Dev Protocol since 2018, aiming at the world where all innovators are evaluated and can sustainably challenge their goals.</p>
<p>Dev Protocol is an open source middleware and it</p>
<ul>
<li>is a decentralized protocol built on Ethereum.</li>
<li>allows creators to tokenize their assets and turn them into sustainable.</li>
<li>enables creators to monetize and share with the entire community.</li>
</ul>
<p>It is a technology that makes it possible for people to monetize internet open assets such as Open Source, Open Access, Creative Commons and so on.<br>
Dev Protocol is now corresponding to GitHub repository, so OSS developers all over the world have been successfully raising funds.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/stakes-social_top.png" alt="Dev Protocol を使った公式アプリケーション(Dapp) Stakes.social"><br>
Official Application using Dev Protocol (Dapp) Stakes.social</p>
<h1>Challenges of monetizing open assets</h1>
<p>We’ve actually had various ways of monetization for creators’ open assets.</p>
<p>For example, we have</p>
<ul>
<li>ad revenue from streaming (YouTube)</li>
<li>Sales of contents at blog platform and social tipping (Buy Me a Coffee, Coil)</li>
<li>Service for production and sales of merchandise (Redbubble)</li>
<li>Crowdfunding (Kickstarter, GoFundMe)</li>
<li>Donation service (Patreon, GitHub Sponsors)</li>
</ul>
<p>There are many types of support services for creators, and people can easily start using them. Despite high familiarity of such service, we’ve had a desire to develop a decentralized protocol instead of a web service.</p>
<h1>As a means to pay for free assets</h1>
<p>Our main reason for it is that in such web service, supporters simply pay for  provided “contents” and “products” as well as contribute to their advertisement value while creators’ daily activities themselves are not monetized (in spite of the fact that their activities are the biggest source of value that creators provide us with).</p>
<p>All of us can use assets like OSS that are open and free on the internet without any payment. Therefore, more than 83% of projects are terminated within a year although there are a number of methods for monetization, which is a critical condition in terms of the crisis of sustainability. (Reference:<a href="https://speakerdeck.com/aggre/the-money-for-the-openable-and-shareable-era" target="_blank" rel="noopener">The money for the openable and shareable era</a>)</p>
<h1>Why are open assets free of charge?</h1>
<p>I have a question for those who have used assets such as Open Access and Creative Commons. <strong>“Do you think we can use these assets for free because they have no economic value?”</strong></p>
<p>If assets are closed, monetization becomes much easier. You can just say to your users, “If you want to use it, pay for it.” It is an extremely simple transaction, but why do creators make their assets open? You can find the answer if you look at the situation in the OSS world.<br>
Because of the openness, users from all over the world participate in collaboration, and innovation is on the rise.</p>
<h1>Open protocol to circulate funds for free assets</h1>
<p>So far, we’ve talked about Dev Protocol’s ability</p>
<ul>
<li>to monetize creators’ assets per se</li>
<li>to pay compensation for free assets</li>
<li>to ensure sustainable creators’ environment for their activities</li>
<li>to realize sustainable support for supporters</li>
</ul>
<p>These 4 points were required goals to achieve the development of Dev Protocol.</p>
<p>Transaction based on the closed trade has been the basis in our economic system. In order to accurately evaluate potential market value of open assets which have already shown a rapid expansion, we came to a conclusion that we need to develop an open economic system, in other words, a new protocol.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/open-asset-economy.png" alt="Open Assetの経済を作り、既存経済を塗り変える"><br>
Create an Open Asset economy to change existing economy</p>
<h1>New &amp; sustainable incentive model</h1>
<p>Dev Protocol is a whole new ecosystem designed for creators. It enables creators to tokenize open assets, and to use great features to grow their projects.</p>
<p><img src="/images/posts/why-we-are-building-dev-protocol-not-a-donation-service/dev-protocol_schemeoutline_for_EN.png" alt="Dev Protocolのスキーム概要"><br>
Overview of Dev Protocol’s scheme</p>
<p>What Dev Protocol is dramatically changing creates an opportunity to change for both creators and sponsors.<br>
If you support creators through DEV tokens, both creators and supporters receive more DEV tokens. In other words, it is a structure in which “both creators and supporters have incentives”.</p>
<h1>Profit by supporting creators</h1>
<p>When it comes to traditional donation, “money is gone” from the perspective of supporters, so it is difficult for creators to expect continuous donation as it is based on supporters’ good intentions. However, with DEV tokens, new DEV tokens will consequently increase in accordance with the period of support. That means we have incentives to continue support instead of a system relying on good intentions.</p>
<p>*For more details, have a look at our latest <a href="https://github.com/dev-protocol/protocol/blob/master/docs/POLICY.md" target="_blank" rel="noopener">Policy</a> on whitepaper.</p>
<h1>Sharing ownership and profits</h1>
<p>Another remarkable feature of Dev Protocol is its ability to produce a quality like <strong>“corporation”</strong> for assets. It is called OSS token.</p>
<p>Functions of OSS token are like this:</p>
<ul>
<li>Proof of ownership and sharing with others on a voluntary basis.</li>
<li>While assets are being sponsored, DEV tokens are automatically distributed to all OSS token holders.</li>
<li>DEV tokens will increase every 15 seconds according to the ownership rate of OSS token.</li>
</ul>
<p>Since OSS token is ERC20, you can sell or buy it at DEX, etc. Thanks to this system, all the people involved, including creators, contributors and supporters, can share incentives.</p>
<h1>Decentralized protocol</h1>
<p>As Dev Protocol is decentralized, all of us can utilize this network and create an application equipped with a sustainable incentive model.</p>
<p><strong>No administrators intervene in this process. Everything is operated openly and in real time on blockchain.</strong> All users, including creators, supporters and community members, can increase their DEV by 1 block (every 15 secs), so there is no need for them to manage reward.</p>
<p>This structure is made for creators to focus on “creating” without worrying about extra work since it is our goal to change the world where they can sustainably “create”.</p>
<h1>Past and Future of Dev Protocol</h1>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Dev Protocol’s 2021 is aimed at making <a href="https://t.co/q1a8aKLQB5">https://t.co/q1a8aKLQB5</a> the got-to solution for Open Source funding. We’re excited to share some of our milestones for 2021! 🎉 <br><br>-DeFi Integrations<br>-More UI/UX Updates<br>-Growth Hacking Strategies<br>-Launch Governance<br>-Staking Perks<br>-L2 Scaling <a href="https://t.co/dkanvfsNyl">pic.twitter.com/dkanvfsNyl</a></p>&mdash; Dev Protocol (@devprtcl) <a href="https://twitter.com/devprtcl/status/1350126479141728259?ref_src=twsrc%5Etfw">January 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>A year has passed since the main net launch of Dev Protocol. Its ecosystem keeps largely growing with many supporters. Through our blog, INITTO, which has just started recently, we’ll share our information to spread the usage of Dev Protocol for creators. 🐇</p>
<p>Thank you for reading our blog post!<br>
If you are interested in the activities of the Dev Protocol Team, please join our <a href="(https://discord.gg/VwJp4KM)" target="_blank" rel="noopener">Discord</a>. We’re also looking forward to your comments on <a href="https://github.com/dev-protocol/DIPs" target="_blank" rel="noopener">GitHub</a>, because Dev Protocol itself is an OSS of which anybody can propose changes.</p>
<p>DevRel Team, which runs INITTO, shares information on its team tasks at GitHub. If you want to work with us for translation, writing documents and blog articles, community projects, we’ll post your activities as ambassadors.<br>
Please feel free to send a DM to us on Twitter(<a href="https://twitter.com/devprtcl" target="_blank" rel="noopener">@devprtcl</a>) if you’re interested in joining our team. We welcome feedback from you.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Technical description of the incubator</title>
    <link href="https://initto.devprotocol.xyz/posts/20210310/"/>
    <updated>2021-03-10T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210310/</id>
    <content type="html"><![CDATA[
      <h1>In the beginning</h1>
<p>I’m <a href="https://twitter.com/horobi_gengar" target="_blank" rel="noopener">Taniguchi</a>, an engineer at <a href="https://corp.frame00.com" target="_blank" rel="noopener">Frame00</a>.<br>
I would like to give you a technical explanation of our new feature, <a href="https://medium.com/devprtcl/dev-protocol-incubator-launches-ef4f35940095" target="_blank" rel="noopener">Incubator</a>, which was released recently.</p>
<h1>Overview</h1>
<ul>
<li><a href="#role-setting">Role settings</a></li>
<li><a href="#eternal-storage">Eternal Storage</a></li>
<li><a href="#interface">Interface</a></li>
</ul>
<h1>Description</h1>
<p><a name="role-setting"></a></p>
<h2>Role settings</h2>
<p>The incubator is designed to operate with three roles: an administrator, a storage administrator, and an operator.<br>
The administrator has combined authority to perform all functions, including those of the storage administrator and the operator, while the storage administrator and the operator have authority to perform for each relevant function.<br>
Incubator implements this role configuration feature using OpenZeppelin's AccessControl.<br>
<a href="https://docs.openzeppelin.com/contracts/3.x/" target="_blank" rel="noopener">OpenZeppelin</a> is a Solidity library. By using OpenZeppelin, you can dramatically increase the efficiency of developing contracts using Solidity.<br>
One of them is a contract called <a href="https://docs.openzeppelin.com/contracts/3.x/access-control" target="_blank" rel="noopener">AccessControl</a>. By using this contract, you can implement a contract that assumes operation with separate roles. By using this, it is possible to implement a contract that assumes operation with separate roles.<br>
AccessControl was a bit complex due to a variety of functions implemented, so we created a wrapped contract to simply implement the only necessary functions.<br>
It is available in the public domain, and you can use it if you like (at your own risk).</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>util<span class="token operator">-</span>contracts</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Admin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/util-contracts/contracts/access/Admin.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// By inheriting the Admin contract, addAdmin, deleteAdmin and isAdmin functions are available.</span></span><br><span class="highlight-line"><span class="token comment">// If necessary, you can add, delete, or confirm users who hold Admin privileges.</span></span><br><span class="highlight-line">contract Logic is Admin <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Since the Admin contract inherits AccessControl,</span></span><br><span class="highlight-line">    <span class="token comment">// it is possible to create new roles and link them with addresses depending on the situation.</span></span><br><span class="highlight-line">    bytes32 <span class="token keyword">public</span> constant <span class="token constant">OPERATOR_ROLE</span> <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"OPERATOR_ROLE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// After the constructor of the Logic contract is executed, the constructor of the Admin contract will be executed.</span></span><br><span class="highlight-line">    <span class="token comment">// Then, Admin privileges will be automatically granted to deployers.</span></span><br><span class="highlight-line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// The setup here is that when Admin rights are granted, operator rights are also granted.</span></span><br><span class="highlight-line">        <span class="token function">_setRoleAdmin</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_ADMIN_ROLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token comment">// Operator privileges are also granted to deployers.</span></span><br><span class="highlight-line">        <span class="token function">grantRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> <span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Modifiers for checking Operator privileges</span></span><br><span class="highlight-line">    modifier onlyOperator <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">require</span><span class="token punctuation">(</span><span class="token function">isOperator</span><span class="token punctuation">(</span><span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"operator only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        _<span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// By granting onlyOperator, it can only be executed by a users with Operator privileges</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external pure onlyOperator <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint256</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can check whether you have Operator privileges or not.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">isOperator</span><span class="token punctuation">(</span><span class="token parameter">address account</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can grant the Operator privilege. </span></span><br><span class="highlight-line">    <span class="token comment">// This function cannot be executed without Admin privileges, since it is marked as "onlyAdmin".</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">addOperator</span><span class="token punctuation">(</span><span class="token parameter">address _operator</span><span class="token punctuation">)</span> external onlyAdmin <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">grantRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> _operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// You can take away the Operator privileges.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">deleteOperator</span><span class="token punctuation">(</span><span class="token parameter">address _operator</span><span class="token punctuation">)</span> external onlyAdmin <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">revokeRole</span><span class="token punctuation">(</span><span class="token constant">OPERATOR_ROLE</span><span class="token punctuation">,</span> _operator<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>OpenZeppelin also has a contract called <a href="https://docs.openzeppelin.com/contracts/2.x/access-control#ownership-and-ownable">Ownable</a>.<br>
If there are only two patterns, a role as an administrator and a role other than that, use Ownable instead of AccessControl.<br>
This is simpler to implement, which reduces deployment and execution costs, and makes it easier to operate.</p>
<p><a name="eternal-storage"></a></p>
<h2>Eternal Storage</h2>
<p>The incubator is designed to be up-gradable.<br>
By retaining the data in an external contract, if a problem is found in the logic of the incubator itself, or if a change in specifications is necessary, the program can be modified as necessary, the storage can be replaced, and the operation can continue.<br>
This mechanism is called &quot;<a href="https://fravoll.github.io/solidity-patterns/eternal_storage.html" target="_blank" rel="noopener">Eternal Storage</a>&quot;. It’s not my invention, but it is one of the famous Solidity design patterns. Simply put, it is just a hashmap.<br>
Contracts deployed on the blockchain are not modifiable, so if you want to operate them continuously like a web application, you can use this mechanism.<br>
This is a very useful design pattern, but it has some disadvantages. Since the data is written to a separate contract, the cost of gas will be higher. You need to consider the actual operation, compare advantages and disadvantages, and decide whether to use it or not.<br>
As with the aforementioned Admin contract, it is available as util-contracts, so if you wish to use it (at your own risk), please do so.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>util<span class="token operator">-</span>contracts</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>SafeMath<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@openzeppelin/contracts/math/SafeMath.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>UsingStorage<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/util-contracts/contracts/storage/UsingStorage.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token comment">// Create a contract that inherits UsingStorage.</span></span><br><span class="highlight-line">contract Logic is UsingStorage <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token comment">// To prevent overflow, SafeMath is used for the calculation process.</span></span><br><span class="highlight-line">    using SafeMath <span class="token keyword">for</span> uint256<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token parameter">string memory _key<span class="token punctuation">,</span> uint256 _value_</span><span class="token punctuation">)</span> internal</span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// Here we have stored uint256 as an example, but you can use address, string, or boolean.</span></span><br><span class="highlight-line">        <span class="token comment">// For more details, please refer to the EternalStorage contract that is generated inside UsingStorage.</span></span><br><span class="highlight-line">        <span class="token function">eternalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUint</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> _price<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> <span class="token keyword">public</span> view <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">uint256</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">eternalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUint</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> <span class="token keyword">private</span> pure <span class="token function">returns</span> <span class="token punctuation">(</span><span class="token parameter">bytes32</span><span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// In EVM, data is always saved as 32 bytes when it is stored in Storage.</span></span><br><span class="highlight-line">        <span class="token comment">// Therefore, considering the amount of data to be stored and the amount of gas to be used, </span></span><br><span class="highlight-line">        <span class="token comment">// setting it at 32 bytes will be the most efficient.</span></span><br><span class="highlight-line">        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token string">"_key"</span><span class="token punctuation">,</span> _key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// This function increments the number each time the add function is executed.</span></span><br><span class="highlight-line">    <span class="token comment">// By storing the direct in external storage instead of internal variables, it can be operated continuously.</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">string memory _key</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        uint256 tmp <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">        <span class="token function">setValue</span><span class="token punctuation">(</span>_key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h3>Example of operation</h3>
<h4>[When first deployed]</h4>
<ol>
<li>After deploying the Logic contract, run the createStorage function to create the storage.</li>
</ol>
<h4>[When deploying for the second time or later]</h4>
<ol>
<li>If you want to change the specification of the Logic contract, deploy the modified Logic contract first.</li>
<li>Run the old Logic contract's getStorageAddress function to get the address of EternalStorage.</li>
<li>Run the setStorage function of the new Logic contract to set the address of the EternalStorage.</li>
<li>Run the old Logic contract's changeOwner function to delegate storage write permission to the new Logic contract.</li>
</ol>
<p><a name="interface"></a></p>
<h2>Interface</h2>
<p>An interface in Solidity is a description of a function definition that can be executed outside the contract.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// 例 Dev Protocol's Allocator contract interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.5</span><span class="token number">.17</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">interface</span> <span class="token class-name">IAllocator</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">beforeBalanceChange</span><span class="token punctuation">(</span></span><br>        <span class="token parameter">address _property<span class="token punctuation">,</span><br><span class="highlight-line">        address _from<span class="token punctuation">,</span></span><br>        address _to</span><br><span class="highlight-line">    <span class="token punctuation">)</span> external<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">calculateMaxRewardsPerBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external view <span class="token function">returns</span> <span class="token punctuation">(</span>uint256<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>The interface itself can only contain externals, but there is no problem if the actual contract is public.<br>
(Except the case of inheritance).<br>
The biggest advantage of using interfaces is that they can resolve dependencies.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">interface</span> <span class="token class-name">ILogic</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>SafeMath<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@openzeppelin/contracts/math/SafeMath.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>ILogic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./ILogic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic is ILogic<span class="token punctuation">{</span></span><br><span class="highlight-line">    using SafeMath <span class="token keyword">for</span> uint256<span class="token punctuation">;</span></span><br><span class="highlight-line">    uint256 <span class="token keyword">private</span> counter<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        counter <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Example: Using an interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>ILogic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./ILogic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic2UseInterface <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> logic <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">ILogic</span><span class="token punctuation">(</span>logic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Example: Not using the interface</span></span><br><span class="highlight-line"><span class="token comment">// SPDX-License-Identifier: MPL-2.0</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>Logic<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Logic.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic2NotUseInterfase <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> logic <span class="token operator">=</span> <span class="token number">0x00000</span><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token function">Logic</span><span class="token punctuation">(</span>logic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hogehoge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>When using an interface, you don't need to be aware of what you are doing in the caller (Logic.hogehoge() in this case).<br>
If you create a flatten file(*1) for Logic2NotUseInterfase, it will contain the Logic2 contract, the Logic contract, and the SafeMath library referenced from it.<br>
If the SafeMath library refers to another large contract or library, it must also be included.<br>
When this happens, the size of the bytecode generated from it becomes large, and the gas cost at the time of deployment becomes bloated, creating a major operational burden.<br>
Conversely, if you want to create a flatten file for Logic2UseInterfase, you only need the Logic2 contract and the ILogic interface.<br>
The size of the bytecode will be smaller, and the operational cost will be less.<br>
There is also the advantage of reduced implementation cost, as the interface allows building without the main contract.<br>
We are benefiting from the use of Dev Protocol interface as well as Incubator.<br>
The Dev Protocol interface is open for everyone to use, and you are welcome to use it if you like.</p>
<p>*1 A file that combines all relevant sol files into one in order to register programming code with Etherscan.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Installation command</span></span><br><span class="highlight-line">npm install @devprotocol<span class="token operator">/</span>protocol</span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token comment">// Implementation example</span></span><br><span class="highlight-line">pragma solidity <span class="token operator">>=</span><span class="token number">0.7</span><span class="token number">.6</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">import</span> <span class="token punctuation">{</span>IDev<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@devprotocol/protocol/contracts/interface/IDev.sol"</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">contract Logic <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    address <span class="token keyword">private</span> devToken <span class="token operator">=</span> <span class="token number">0x5cAf454Ba92e6F2c929DF14667Ee360eD9fD5b26</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">function</span> <span class="token function">lockup</span><span class="token punctuation">(</span><span class="token parameter">address _property<span class="token punctuation">,</span> uint256 _staking</span><span class="token punctuation">)</span> external <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token comment">// staking!</span></span><br><span class="highlight-line">        <span class="token function">IDev</span><span class="token punctuation">(</span>devToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span>_property<span class="token punctuation">,</span> _staking<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<h1>Finally</h1>
<p>There might be more to share, but I have described the most common ones.<br>
We will release more information on how to write and operate test cases as well as Solidity.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (2/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210305/"/>
    <updated>2021-03-05T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210305/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
This is the second. If you haven't read the last time yet, please go back to <a href="https://initto.devprotocol.xyz/posts/20210226/" target="_blank" rel="noopener">1st</a>.<br>
This time I would like to make a detailed page of the creator</p>
<ul>
<li>STEP01: <a href="#heading-step01:get-creator-information">Get creator information</a></li>
<li>STEP02: <a href="#heading-step02:-get-token-information">Get token information</a></li>
<li>STEP03: <a href="#heading-step03:-get-cover-image-of-token">Get cover image of token</a></li>
<li>STEP04: <a href="#heading-step04:-code-the-detail-page">Code the detail page</a></li>
</ul>
<h2>Prepare the development environment</h2>
<p>We will continue to use the development environment that was used the first time.<br>
For details, please check <a href="/posts/20210226/#section-1">1st</a></p>
<h2>Overview of the detail page</h2>
<p>The page will create this time will be the creator details page that is transitioned from the creator list page. On the creator details page, the creator's information and the tokens possessed are displayed.<br>
<img src="/images/posts/20210305/pic03.png" alt="tokens page"></p>
<h2>STEP01:Get creator information</h2>
<p>Creator information is got from dev-for-apps. The creator's address used to get it is added to the link URL from the index page</p>
<pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**<br><span class="highlight-line"> * Page transition from index with the following URL</span><br><span class="highlight-line"> * https://localhost:3000/tokens.html?creator=xxxxx</span><br> **/</span><br><span class="highlight-line"><span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token keyword">const</span> creator   <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'creator'</span><span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token operator">:</span> creator<span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token operator">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token operator">...</span></span></code></pre>
<h2>STEP02: Get token information</h2>
<p>The token information is got from the Data Viewer.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(where: {author: {_eq: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}}) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                        name</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<h2>STEP03: Get cover image of token</h2>
<p>In Data Viewer, the token cover image cannot be got, so it is got from dev-for-app.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token operator">:</span> address<span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/properties?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token operator">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The acquired data is in the following JSON format.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token punctuation">[</span></span><br><span class="highlight-line">    <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token string">"cover_image"</span><span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"url"</span><span class="token operator">:</span> <span class="token string">"https://storageaccountdevfobc15.blob.core.windows.net/dev-for-apps-images/assets/d3e6c900_6a1b_11ea_91be_d87dfda8b8e7_36d483d5b7.jpg"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token operator">...</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token operator">...</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">]</span></span></code></pre>
<p>Various information other than this can be obtained, but here, the information other than those used on the details page is omitted.</p>
<h2>STEP04: Code the detail page</h2>
<p>Code the detail page. Please code main.ts referring to the code below</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br>  <span class="token comment">/**<br><span class="highlight-line">   * main.ts is called from both the list page and the detail page. </span><br><span class="highlight-line">   * So you need to separate the processing for each</span><br>   */</span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">// Warning: The processing of the list page created in the first time moves to this if statement</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token comment">//　Write the processing of the detail page from here</span></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"page-tokens"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token comment">// Get the creator's address from the GET parameter of the URL</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorAddress <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'creator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get creator information using dev-for-app</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span>creatorAddress<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Creating HTML to display creator information</span></span><br>    <span class="token keyword">const</span> profileElementString <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">        &lt;img class="mb-4 rounded-circle border border-3 border-dark" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>portrait<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="creator image" width="168" height="168" style="object-fit: contain"></span><br><span class="highlight-line">        &lt;p class="mb-0 fs-5"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br>    </span><span class="token template-punctuation string">`</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"creator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    creatorHTMLElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> profileElementString<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get HTML to display token information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> tokensHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tokens"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get the token list from Data Viewer</span></span><br><span class="highlight-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> token <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getTokens</span><span class="token punctuation">(</span>creatorAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token comment">// Get an image of the token</span></span><br><span class="highlight-line">      <span class="token keyword">const</span> tokenInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPropertiesInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>property<span class="token punctuation">)</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">continue</span></span><br><span class="highlight-line">      <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">const</span> image <span class="token operator">=</span> tokenInfo<span class="token punctuation">.</span>cover_image <span class="token operator">?</span> tokenInfo<span class="token punctuation">.</span>cover_image<span class="token punctuation">.</span>url <span class="token operator">:</span> <span class="token string">""</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment">// Creating HTML to display token information</span></span><br><span class="highlight-line">      <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br>      div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">            &lt;article class="mt-4 mb-3 d-flex"></span><br><span class="highlight-line">                &lt;img class="me-3" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="token image" width="128" height="96" style="object-fit: contain"></span><br><span class="highlight-line">                &lt;div class="d-flex flex-column justify-content-between"></span><br><span class="highlight-line">                   &lt;p class="fs-6"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br><span class="highlight-line">                   &lt;div class="d-flex"></span><br><span class="highlight-line">                        &lt;button type="button" class="me-3 btn btn-lg btn-primary" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="1">1 DEV&lt;/button></span><br><span class="highlight-line">                        &lt;button type="button" class="me-3 btn btn-lg btn-success" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="5">5 DEV&lt;/button></span><br><span class="highlight-line">                        &lt;button type="button" class="btn btn-lg btn-danger" address="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token punctuation">.</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" amount="10">10 DEV&lt;/button></span><br><span class="highlight-line">                   &lt;/div></span><br><span class="highlight-line">                &lt;/div></span><br><span class="highlight-line">            &lt;/article></span><br>        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token keyword">const</span> tokenHTMLElement <span class="token operator">=</span> div<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">      <span class="token comment">// Add to tokens html</span></span><br><span class="highlight-line">      tokensHTMLElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tokenHTMLElement<span class="token punctuation">)</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The code from here is added below the above code. Or you can code it in another file and then import it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getPropertiesInfo</span><span class="token punctuation">(</span><span class="token parameter">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">        address<span class="token operator">:</span> address<span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/properties?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token operator">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        <span class="token keyword">return</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTokens</span><span class="token punctuation">(</span><span class="token parameter">creator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(where: {author: {_eq: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creator<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"}}) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                        name</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the coding so far and a few modifications, the page is complete.<br>
<img src="/images/posts/20210305/pic03.png" alt="tokens page"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This time, I got the token information that the creator has from Data Viewer, got the image of the token from dev-for-app, and made a detail page. You may be accustomed to using Data Viewer and dev-for-app.<br>
Next time, I would like to process staking to tokens and create a connection with my wallet.<br>
Thank you.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>What is Dev Protocol Treasury?</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-treasury/"/>
    <updated>2021-03-03T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-treasury/</id>
    <content type="html"><![CDATA[
      <h2>What is Dev Protocol Treasury?</h2>
<p>The Dev Protocol Treasury is managed by the community to be used for the ecosystem.</p>
<p>It was initiated by <a href="https://medium.com/devprtcl/community-proposal-implement-a-creator-token-fee-to-create-an-oss-etf-d74386909339" target="_blank" rel="noopener">community proposal and vote</a>.</p>
<p>A 5% fee for Property tokens(Total Supply:10M) upon minting will be sent to Dev Protocol Treasury. Since Creator token holders receive the proportional amount of Creator rewards the Dev Protocol treasury will receive 5% of Creator rewards. The OSS token and DEV tokens received will be held in the Dev Protocol treasury which will eventually be governed by the community.</p>
<h2>Usage of Dev Protocol Treasury</h2>
<ul>
<li>
<p>OSS ETF<br>
Dev Protocol Treasury will transform into an OSS ETF since it holds an underlying basket of tokenized OSS(property tokens). The DEV tokens’ value should form a linear relationship with the valuations of the Creator tokens held in the Dev Protocol treasury. The DEV token can provide exposure to the OSS market on Dev Protocol and solve fragmentation.</p>
</li>
<li>
<p>Meta-Governance &amp; Utility<br>
Today, Github users tokenize their OSS projects to participate in receiving Dev Protocol’s inflationary funding. We expect soon that OSS projects will build governance and utility capabilities for their Creator token. Since Dev Protocol would have an underlying portfolio of creator tokens we could extend voting power and utility to DEV token holders. That allows OSS dependent projects or foundations to simply buy DEV tokens to have voting power in a basket of OSS projects.</p>
</li>
<li>
<p>Incentives for maintainers<br>
Open source software is the technological infrastructure of today’s world. OSS projects that are underdeveloped or funded can become a security risk to its dependents. The Dev Protocol community could bootstrap growth by starting commit farming or liquidity mining programs.</p>
</li>
</ul>
<p>※These are just some examples and may vary depending on the development roadmap.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>What is Protocol?</title>
    <link href="https://initto.devprotocol.xyz/posts/what-is-protocol/"/>
    <updated>2021-02-27T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/what-is-protocol/</id>
    <content type="html"><![CDATA[
      <p>Hi, I’m aggre.</p>
<p>Dev Protocol is a tool built on Ethereum. It is a system which replaces the traditional model of donations for OSS funding. The protocol we've built creates opportunities to monetize OSS projects by allowing people from anywhere in the world to stake their cryptocurrency on verified GitHub repositories, where both patrons and OSS projects receive an annual percent return, paid in tokens. Additionally, our protocol can tokenize OSS projects creating a unique incentive model for development from the community. It’s important to understand that this is not a platform, but a protocol. We intentionally included the word in our name to differentiate ourselves from web services or platforms. We aren't normally ones to delve deeply into research on the semantics behind a name, but in this case, it's an important distinction to make.</p>
<h2>Protocols currently in existence</h2>
<p>A great start to get the idea of Dev Protocol is to look for similarities in the internet's ecosystem:<br>
In the modern world of the internet, we see many types of web service using various digital payments for monetization. Most of the service is paid with credit cards, for example, “Alice pays X dollars for Bob”.</p>
<p>A protocol called ISO8583 is used for credit card payment. Since it is a payment via the internet, protocols such as TCP, IP, SSL and TSL are used as well. The money transfer from Alice to Bob is one type of protocol. There are a lot of protocols, but the meaning of each protocol is not so necessary! The fact that the web as we know it is composed of a group of protocols is an important point.</p>
<p>Let’s say a person is launching an e-commerce store without utilizing any existing protocols. Would it be an &quot;e&quot; commerce store? Would it be able to exist at all without all of the modern internet protocols we use every day without realizing? This is a rhetorical question, but for the sake of clarity, the answer is no, it would be completely useless, disconnected from the world, unreachable, unusable, and practically non-existent. The web protocols are a critical component of the internet, where as a web service is merely a convenient product, where, without it, the core functionality of the web would not change.</p>
<p>I think you get the idea on the difference between “web service” and “protocol”.</p>
<h2>What’s Dev Protocol used for?</h2>
<p>Dev Protocol enables people to monetize open assets such as OSS, Open Access, etc. It is a kind of function that replaces arrangements like “Alice pays X dollars for Bob” mentioned in the previous chapter.</p>
<p>The difference between open assets and mugs sold at an online shop is that people cannot receive payment as compensation for the service of open assets. Creators of open source software release these high value pieces of technology with good intentions, knowing full well that they will have to earn their living from another source of income. There is a disconnect between the ease of using such software, and how to fund it. Imagine if there was an ecosystem where everyone was rewarded monetarily for participating in creating/funding.</p>
<p>Conventionally, the biggest chance for monetization that people can rely on with open assets was donation. Donation itself is one of the greatest protocols. However, we thought it inappropriate that open assets rely on a single protocol. That’s why we developed Dev Protocol.</p>
<h2>What can we do with Dev Protocol?</h2>
<p>Briefly speaking, it’s like this : “Both Alice and Bob gain an income without money transfer.” Oh, please don’t think that I’ve turned into an enigmatic alien from outer-space!</p>
<p>It sounds crazy but it's true, the income here is not cash but crypto assets called DEV. DEV is inflating slowly, in other words, it increases the total amount of supply gradually. Its new supply is allocated to people depositing DEV into the repositories of OSS creators. Depositing is usually called “Staking”.</p>
<p>Patrons who have staked their DEV receive additional DEV tokens as a reward. For example, if the staked DEV is 100%, the total DEV with new supply becomes 120%. OSS creators receive the new supply of DEV in proportion to the number of staking that they’ve obtained.</p>
<p>Let me organize what I’ve talked to you so far in the next chapter.</p>
<h2>Who uses Dev Protocol?</h2>
<p>There are 3 types of people.</p>
<ol>
<li>Authors</li>
<li>Patrons</li>
<li>Maintainers</li>
</ol>
<p>Their description is as follows:</p>
<p><strong>Authors</strong><br>
Authors do activities that are subject to patrons’ support. Open source developers, researchers and creators are categorized as such people. Authors gain owner reward in proportion to the obtained number of staking.</p>
<p><strong>Patrons</strong><br>
Patrons stake on OSS projects in order to support authors’ activities. Patrons gain staking rewards in return for supporting authors.</p>
<p><strong>Maintainers</strong><br>
Maintainers help develop the protocol, authenticating authors’ activities, and improve the core of Dev Protocol.</p>
<h2>Are we Dev Protocol?</h2>
<p>I think you’ve already noticed that protocols are not developed by certain companies, as I touched on it in the previous chapter. The internet is never composed of only one company.</p>
<p>Dev Protocol is maintained by Frame00, a Japanese company, currently. However, its control over the protocol is going to slowly dwindle little by little in the process of “decentralization”, which would take 6 months to 1 year and a half, as we give control over to the community.</p>
<p>As long as Dev Protocol is a protocol, its  existence is like that of the internet (TCP/IP) or SSL/TSL, so it shouldn’t be developed for sales by a single commercial company.</p>
<h2>Maintenance without administrators</h2>
<p>Our idea is that a system maintained by people meeting and parting based on incentives is more sustainable in terms of neutrality and permanence, rather than a maintenance system that relies on a legal body.</p>
<p>The reason why we adopted Ethereum as the basis for Dev Protocol is the same. Since Ethereum is one of the decentralized computing, it runs without administrators.</p>
<p>That means, in case we’re all run over by a bus, Dev Protocol continues to operate normally. When it comes to the adequacy of a protocol, such function should be required, and have no single point of failure.</p>
<h2>What can developers do?</h2>
<p>If you have an idea for an open source project but lack funds or funding to accomplish your goals, Dev Protocol may be the tool for you.</p>
<p>You can also create monetizing services on the web for users such as Authors and Patrons. There is no need to pay commission for the protocol, and no restriction like API limit. You can work as a Maintainer to develop a protocol itself. There aren’t so many codes required.</p>
<p>We have a more concise overview of Dev Protocol in our documentation here: <a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">https://docs.devprotocol.xyz/dev-protocol/</a></p>
<p>For those who want to know more about Dev Protocol, I’m preparing an article about decentralized protocols for my next entry.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>How to create Dev Protocol Dapp (1/3)</title>
    <link href="https://initto.devprotocol.xyz/posts/20210226/"/>
    <updated>2021-02-26T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210226/</id>
    <content type="html"><![CDATA[
      <h2>Hello</h2>
<p>I would like to create a simple Dapp in 3 steps using the library provided by the Dev Protocol.<br>
Dapp will list the creators of OSS projects that are tokenized by the Dev Protocol, then display the tokens of those creators, and then create a staking function.</p>
<ul>
<li>Step1: <a href="#section-1">Prepare the development environment</a></li>
<li>Step2: <a href="#section-2">Get a list of creators using Data Viewer</a></li>
<li>Step3: <a href="#section-3">Get creator information using dev-for-apps</a></li>
<li>Step4: <a href="#section-4">Code the list page</a><br>
<a name="section-1"></a></li>
</ul>
<h2>Prepare the development environment</h2>
<p>First, let's prepare a development environment. I have prepared the sample code for this tutorial on Github, so please use it.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">git clone https://github.com/kazu80/tokener-find.git -b sample-code-v1.5.2</span></code></pre>
<p>Run npm after clone</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">cd tokener-find</span><br><span class="highlight-line">npm install</span></code></pre>
<p>After that, execute the following command to start the site locally</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">npx webpack</span><br><span class="highlight-line">npx webpack serve</span></code></pre>
<h2>Overview of the application</h2>
<p>This application has the following 2 pages</p>
<ul>
<li>Creator list page</li>
<li>Creator details page</li>
</ul>
<p>On the creator details page, Display the tokens owned by the creator and select and staking tokens.</p>
<p><img src="/images/posts/20210226/pic01.png" alt="Complete image"><br>
※ The html file under the src directory is this screen<br>
※ If you want to see how it works, you can also check it from <a href="https://kawakami.dev/lab/tokens/" target="_blank" rel="noopener">here</a></p>
<p>This time, I would like to create a creator list page.</p>
<h2>Creating a creator list page</h2>
<p>The Dev Protocol tokenizes OSS projects. So to get a list of creators, you need to filter all tokens by Author name.<br>
<a name="section-2"></a></p>
<h3>Get a list of creators using Data Viewer</h3>
<p>Token information can be gotten from Data Viewer</p>
<blockquote>
<p>Please refer to the linked document for <a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">Data Viewer</a></p>
</blockquote>
<p>You can get a list of creators with the endpoints and queries below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">// endpoints</span><br><span class="highlight-line">https://api.devprtcl.com/v1/graphql</span><br><span class="highlight-line"></span><br><span class="highlight-line">// query</span><br><span class="highlight-line">query Properties {</span><br><span class="highlight-line">    property_meta(distinct_on: author) {</span><br><span class="highlight-line">        property</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p>This is a sample to get a list of creators using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">        method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">            <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">            <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">        body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>            query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        property</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> allCreatorInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span></code></pre>
<p>The data is in JSON format as shown below</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">{</span><br><span class="highlight-line">    "data": {</span><br><span class="highlight-line">        "property_meta": [</span><br><span class="highlight-line">            {</span><br><span class="highlight-line">                "author": "Creator address"</span><br><span class="highlight-line">            },</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        ]</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">}</span></code></pre>
<p><a name="section-3"></a></p>
<h3>Get creator information using dev-for-apps</h3>
<p>Data Viewer can only get the creator's address. I also want to use the creator's name and image on the list page, so get the information from dev-for-apps</p>
<blockquote>
<p>dev-for-apps is an API that get creator information and token information.</p>
</blockquote>
<p>Create a URL and make a GET request</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">https://dev-for-apps.azureedge.net/accounts?address="Creator address"</span></code></pre>
<p>Get creator information using fetch</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token operator">:</span> <span class="token string">"Creator address"</span><span class="token punctuation">,</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token operator">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line"><span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></code></pre>
<p>The data is in JSON format as shown below.</p>
<pre class="language-text"><code class="language-text"><span class="highlight-line">[</span><br><span class="highlight-line">    {</span><br><span class="highlight-line">        "name": "name",</span><br><span class="highlight-line">        "portrait": {</span><br><span class="highlight-line">            "url": "profile image URL",</span><br><span class="highlight-line">            ...</span><br><span class="highlight-line">        },</span><br><span class="highlight-line">        ...</span><br><span class="highlight-line">    }</span><br><span class="highlight-line">]</span></code></pre>
<p>The dev-for-apps API can get a lot of other information.</p>
<p><a name="section-4"></a></p>
<h3>Code the list page</h3>
<p>Coding the creator list page using the gotten data.<br>
If you put all the sample code that follows in <code>src/assets/ts/main.ts</code>, the creator list will be displayed.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token comment">// Get a list of creators from Data Viewer</span></span><br><span class="highlight-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> info <span class="token keyword">of</span> <span class="token keyword">await</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get creator information using dev-for-app</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>creatorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token keyword">continue</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Creating HTML to display creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">        &lt;article class="row mt-4 mb-3"></span><br><span class="highlight-line">            &lt;div class="col-10 d-flex align-items-center"></span><br><span class="highlight-line">                &lt;img class="rounded-circle me-3" src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>portrait<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" alt="creator image" width="60" height="60" style="object-fit: contain"></span><br><span class="highlight-line">                &lt;p class="fs-6"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>creatorInfo<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p></span><br><span class="highlight-line">            &lt;/div></span><br><span class="highlight-line">            &lt;a href="tokens.html?creator=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" class="col-2 d-flex align-items-center justify-content-center btn btn-primary">TOKEN&lt;/a></span><br><span class="highlight-line">        &lt;/article></span><br>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorInfoHTMLElement <span class="token operator">=</span> div<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">    <span class="token comment">// Get a tag to insert creator information</span></span><br><span class="highlight-line">    <span class="token keyword">const</span> creatorsHTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"creators"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">    </span><br><span class="highlight-line">    creatorsHTMLElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>creatorInfoHTMLElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>
<p>The code from here is added below the above code. Or you can code it in another file and then import it.</p>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllCreatorInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.devprtcl.com/v1/graphql"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    headers<span class="token operator">:</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">      <span class="token string">"X-Requested-With"</span><span class="token operator">:</span> <span class="token string">"xhr"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">      <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><br><span class="highlight-line">    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br>      query<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"><br><span class="highlight-line">                query Properties {</span><br><span class="highlight-line">                    property_meta(distinct_on: author) {</span><br><span class="highlight-line">                        author</span><br><span class="highlight-line">                    }</span><br><span class="highlight-line">                }</span><br>            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><br><span class="highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>property_meta<span class="token punctuation">;</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<pre class="language-javascript"><code class="language-javascript"><span class="highlight-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCreatorInfo</span><span class="token punctuation">(</span><span class="token parameter">creatorAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">  <span class="token keyword">const</span> query_params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><br><span class="highlight-line">    address<span class="token operator">:</span> creatorAddress<span class="token punctuation">,</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://dev-for-apps.azureedge.net/accounts?"</span> <span class="token operator">+</span> query_params<span class="token punctuation">,</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    method<span class="token operator">:</span> <span class="token string">"GET"</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><br><span class="highlight-line"></span><br><span class="highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'portrait'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>portrait<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><br><span class="highlight-line">    <span class="token keyword">return</span></span><br><span class="highlight-line">  <span class="token punctuation">}</span></span><br><span class="highlight-line">  </span><br><span class="highlight-line">  <span class="token keyword">return</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><br><span class="highlight-line"><span class="token punctuation">}</span></span></code></pre>
<p>With the coding so far and a few modifications, the page is complete.<br>
<img src="/images/posts/20210226/pic02.png" alt="list page image"><br>
You can check the source code of the completed version from the following<br>
<a href="https://github.com/kazu80/tokener-find/tree/master/src" target="_blank" rel="noopener">https://github.com/kazu80/tokener-find/tree/master/src</a></p>
<h2>Summary</h2>
<p>This time, using the two libraries provided in the Dev Protocol, we acquired creator information and detailed information.<br>
<a href="https://initto.devprotocol.xyz/posts/20210305/" target="_blank" rel="noopener">Next time</a>, we will create a detailed page for creators.</p>

    ]]></content>
  </entry>
	
  
  <entry>
    <title>Dev Protocol documentation information</title>
    <link href="https://initto.devprotocol.xyz/posts/20210215/"/>
    <updated>2021-02-15T00:00:00+00:00</updated>
    <id>https://initto.devprotocol.xyz/posts/20210215/</id>
    <content type="html"><![CDATA[
      <p>We would like to inform you of the currently available Dev Protocol documentation.</p>
<h2>Development documentation</h2>
<p>Here’s a summary of Dev Protocol’s features.</p>
<p><a href="https://github.com/dev-protocol/protocol/blob/main/README.md" target="_blank" rel="noopener">dev-protocol/protocol</a></p>
<p>Once set up, you will be able to use the functions provided by the Dev Protocol. Please use it when you want to use the Dev Protocol contract in Dapp development.<br>
The document above is a README, so please refer to the following link for more details.</p>
<p><a href="https://docs.devprotocol.xyz/dev-protocol/" target="_blank" rel="noopener">Development documentation</a></p>
<blockquote>
<p>p.s. There is an old part in the content of the document, so if you do not understand, please ask at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a></p>
</blockquote>
<h2>dev-kit Document</h2>
<p><code>dev-kit</code> is a library for using the functions of Dev Protocol from JavaScript (TypeScript).</p>
<p><a href="https://www.npmjs.com/package/@devprotocol/dev-kit" target="_blank" rel="noopener">dev-kit</a></p>
<p>Please use it when you want to use the Dev Protocol contract from the front end of the application.</p>
<h2>Dev Protocol Data Viewer</h2>
<p>With <code>Data Viewer</code>, You can acquire various data of Dev Protocol by using GraphQL.</p>
<p><a href="https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer" target="_blank" rel="noopener">https://github.com/dev-protocol/event-viewer/wiki/Dev-Protocol-Data-Viewer</a></p>
<h3>Query Builder</h3>
<p><a href="https://explorer.graphql.devprotocol.xyz/" target="_blank" rel="noopener">https://explorer.graphql.devprotocol.xyz/</a></p>
<p>The information in the document is updated from time to time. If you have any questions, or feel a difficulty in understanding the text, please let us know at our <a href="https://discord.gg/VwJp4KM" target="_blank" rel="noopener">Discord</a>.</p>

    ]]></content>
  </entry>
	
</feed>
